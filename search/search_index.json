{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Laravel Tutorial Workshop","text":"<p>Laravel is a free and open-source PHP web framework, created by Taylor Otwell and intended for the development of web applications following the model\u2013view\u2013controller architectural pattern and based on Symfony. Wikipedia</p> <p>Laravel official website : https://laravel.com/</p> <p>Tutorial ini boleh diperolehi secara online di </p> <pre><code>https://akusaiful.github.io/laravel-tutorial/\n</code></pre>"},{"location":"#laravel-prerequisites","title":"Laravel Prerequisites","text":"<ol> <li>PHP &gt;= 7.2.5 (https://www.php.net/)</li> <li>Local Database - MySQL (https://laravel.com/docs/9.x/database)</li> <li>Local PHP Environement (Valet, Homestead, Vagrant, MAMP, Custom..)</li> <li>Composer (https://getcomposer.org/)</li> <li>GIT (Code Management)</li> <li>Apache (Additional jika setup custom)</li> </ol>"},{"location":"#laravel-best-practices","title":"Laravel best practices","text":"<p>Laravel best practices :  https://github.com/alexeymezenin/laravel-best-practices</p>"},{"location":"artisan/","title":"Artisan Command","text":""},{"location":"artisan/#artisan-laravel-command-line-interface","title":"Artisan - Laravel command-line interface","text":"<p>Publish vendor </p> <pre><code>php artisan vendor:publish\n</code></pre> <p>Serve using port</p> <pre><code>php artisan serve --port=8282\n</code></pre> <p>Senaraikan semua route </p> <pre><code>php artisan route:list  \nphp artisan route:list --compact \nphp artisan route:list --name=logout\n\n# untuk lihat yang path api (api route)\nphp artisan route:list --name=contacts --path=api\n</code></pre> <p>Clear config cache <code>env</code>. Jika modified environment</p> <pre><code>php artisan config:clear\n</code></pre> <p>Check Laravel framework version</p> <pre><code>php artisan --version\n</code></pre> <p>Link to storage (create sym link)</p> <pre><code>php artisan storage:link\n</code></pre>"},{"location":"auth_eloquent/","title":"Eloquent Auth","text":""},{"location":"auth_eloquent/#query-owner-record","title":"Query owner record","text":"<p>Change controller `ContactController.php'</p> <pre><code>&lt;?php \n$contacts = Contact::query()-&gt;orderBy('first_name', 'asc')-&gt;filter()-&gt;paginate(8); \n$companies = Company::orderBy('name')-&gt;pluck('name', 'id')-&gt;prepend('All Companies', '');   \n</code></pre> <p>to</p> <pre><code>&lt;?php \n$contacts = \\auth()-&gt;user()-&gt;contacts()-&gt;orderBy('first_name', 'asc')-&gt;filter()-&gt;paginate(8);\n$companies = \\auth()-&gt;user()-&gt;companies()-&gt;orderBy('name')-&gt;pluck('name', 'id')-&gt;prepend('All Companies', '');\n</code></pre>"},{"location":"auth_eloquent/#create-and-save-record-with-user_id-owner-record","title":"Create and Save Record with user_id (Owner record)","text":"<p>Add <code>user_id</code> to property <code>fillable</code> in model <code>contact.php</code></p> <pre><code>protected $fillable = ['first_name', 'last_name', 'email', 'phone', 'address', 'company_id', 'user_id'];\n</code></pre> <p>Change save method in <code>Contactcontroller.php</code></p> <pre><code>&lt;?php \n// first method\nContact::create($request-&gt;all() + ['user_id' =&gt; \\auth()-&gt;id()]);\n\n// Second method\n// Update \n$request-&gt;user()-&gt;contacts()-&gt;find($id)-&gt;update($request-&gt;all());\n// Create new\n$request-&gt;user()-&gt;contacts()-&gt;create($request-&gt;all());\n</code></pre>"},{"location":"auth_email_verification/","title":"Email Verification","text":""},{"location":"auth_email_verification/#email-verification","title":"Email verification","text":""},{"location":"auth_email_verification/#configure-mail","title":"Configure mail","text":"<p>Configuration email berada di dalam fail <code>config/mail.php</code> dengan menggunakan fail <code>.env</code>.  Untuk tujuan kelas akan menggunakan konfigurasi berikut : </p> <pre><code>MAIL_MAILER=smtp\nMAIL_HOST=smtp.hostinger.com\nMAIL_PORT=587\nMAIL_USERNAME=training@danconsult.my\nMAIL_PASSWORD=qwertyuiOP25$$\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=training@danconsult.my\nMAIL_FROM_NAME=\"${APP_NAME}\"\n</code></pre> <p>Change <code>User</code> model to implement <code>MustVerifyEmail</code></p> <pre><code>&lt;?php \nclass User extends Authenticatable implements MustVerifyEmail\n{\n}\n</code></pre> <p>Add <code>verify</code> option ke dalam <code>web.php</code> </p> <pre><code>Auth::routes(['verify' =&gt; true]);\n</code></pre> <p>Add to controller <code>ContactController.php</code>.</p> <pre><code>&lt;?php \npublic function __construct()\n{\n    $this-&gt;middleware(['auth', 'verified']);\n}\n</code></pre> <p>atau guna group dalam <code>web.php</code></p> <pre><code>&lt;?php \nRoute::middleware(['auth', 'verified'])-&gt;group(function () {\n    Route::get('/contacts', 'ContactController@index')-&gt;name('contacts.index');\n    Route::post('/contacts', 'ContactController@store')-&gt;name('contacts.store');\n    // ...\n});\n</code></pre> <p>Testing register new user dan kemudian access ke route contacts.</p>"},{"location":"auth_install/","title":"Installation","text":""},{"location":"auth_install/#authentication-scaffolding","title":"Authentication Scaffolding","text":"<p>Laravel telah menyediakan proses authentication yang asas untuk proses login, logout, forgot password dan reset password. Laravel menggunakan migration table berikut : </p> <ol> <li><code>database\\migrations\\2014_10_12_000000_create_users_table</code> </li> <li><code>database\\migrations\\2014_10_12_100000_create_password_resets_table</code> </li> </ol> <p>untuk melaksanakan proses automasi ini dan menggunakan eloquent <code>app\\Models\\User.php</code> to menguruskan pengguna.</p>"},{"location":"auth_install/#install","title":"Install","text":"<p>Untuk authentication dalam laravel akan guna package <code>laravel/ui</code>. Install <code>laravel/ui</code> package</p> <pre><code>composer require laravel/ui --dev\n</code></pre> <p>Run  </p> <pre><code>php artisan\n</code></pre> <p>verify available package command </p> <pre><code>ui                     Swap the front-end scaffolding for the application\n.\n.\nui\n    ui:auth            Scaffold basic login and registration views and routes\n    ui:controllers     Scaffold the authentication controllers\n</code></pre> <p>Generate authentication scaffolding package (<code>ui:auth</code> akan guna default bootstrap) </p> <pre><code>php artisan ui:auth\n</code></pre> <p>package will install controller and views related to auth, including <code>HomeController</code> and in <code>routes\\web.php</code></p> <pre><code> &lt;?php \napp\\Http\\Controllers\\Auth\napp\\Http\\Controllers\\HomeController.php\nresources\\views\\auth\nresources\\views\\layout\\app.blade.php\n\n// Modified web.php\nAuth::routes();\nRoute::get('/home', [App\\Http\\Controllers\\HomeController::class, 'index'])-&gt;name('home');\n</code></pre> <p>Verify new route for authentication</p> <pre><code>php artisan list\n</code></pre> <p>Login to system and modified content </p> <pre><code>/login\n</code></pre> <p>Access auth object</p> <pre><code>auth()-&gt;user()-&gt;name\n</code></pre> <p>Info</p> <p>Test installation dengan ekses ke URL <code>http://localhost:8000/login</code> atau <code>http://localhost:8000/register</code></p> <p>:bulb: Modified page mengikut bootstrap dengan menggunakan layout yang digunakan di dalam sistem.</p>"},{"location":"auth_install/#remove-certain-functionality","title":"Remove certain functionality","text":"<p>Auth module boleh untuk remove beberapa bahagian yang didatangkan secara default oleh leravel, lihat pada fail <code>routes/web.app</code> </p> <pre><code>Auth::routes([\n    'register' =&gt; false,\n    'reset'  =&gt; false,\n    'verify' =&gt; false\n]);\n</code></pre>"},{"location":"auth_password_confirm_page/","title":"Password Confirm Page","text":""},{"location":"auth_password_confirm_page/#password-confirm-page-protected-sensitive-area","title":"Password Confirm Page : Protected sensitive area","text":"<p>Laravel added new feature in the authentication system to force user to confirm their password before accessing a certain page in your application</p> <p>In you open the <code>app/Http/Kernel.php</code> you will find in the routeMiddleware array the password.confirm middleware has been defined.</p> <pre><code>&lt;?php \nprotected $routeMiddleware = [\n    // ....\n    'password.confirm' =&gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\n    // ...\n];\n</code></pre> <p>Create a new controller</p> <pre><code>php artisan make:controller Settings\\\\AccountController\n</code></pre> <p>Add method <code>index</code></p> <pre><code>&lt;?php \nclass AccountController extends Controller\n{\n    public function index()\n    {\n        return \"&lt;h1&gt;Account Settings&lt;/h1&gt;\";\n    }\n}\n</code></pre> <p>Define new route</p> <pre><code>Route::get('/settings/account', [AccountController::class, 'index']);\n</code></pre> <p>Implement middleware the <code>password.confirm</code></p> <pre><code>&lt;?php \nclass AccountController extends Controller\n{\n    public function __construct()\n    {\n        $this-&gt;middleware(['auth', 'password.confirm']);\n    }\n\n    public function index()\n    {\n        return \"&lt;h1&gt;Account Settings&lt;/h1&gt;\";\n    }\n}\n</code></pre> <p>You can configure the length of time by changing the value of the <code>password_timeout</code> in your <code>config/auth.php</code> file.</p> <pre><code>password_timeout' =&gt; 10800,\n</code></pre>"},{"location":"auth_visibility/","title":"Visibility","text":""},{"location":"auth_visibility/#control-navigation-visibility","title":"Control Navigation Visibility","text":"<pre><code>@auth\n// protected content for authentication user\n@endauth\n</code></pre> <p>Only available for guest</p> <pre><code>@guest\n// this content will hide after user authenticated\n@endguest\n\n// or\n\n@guest\n// for guest\n@else\n// for auth\n@endguest\n</code></pre> <p>For logout, use POST method</p> <pre><code>&lt;a class=\"dropdown-item\" href=\"{{ route('logout') }}\" \n    onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\"&gt;\n    {{ __('Logout') }}\n&lt;/a&gt;\n\n&lt;form id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" class=\"d-none\"&gt;\n    @csrf\n&lt;/form&gt;\n</code></pre>"},{"location":"auth_visibility/#retrieving-the-authenticated-user","title":"Retrieving The Authenticated User","text":"<p>Laravel menyediakan 2 cara untuk mendapatkan auth user :</p> <ol> <li>Using <code>Auth</code> Facade</li> <li>Using <code>Request</code> instance or <code>request</code> helper</li> </ol>"},{"location":"auth_visibility/#using-auth-facade","title":"Using Auth Facade","text":"<p>You can retrieve the current user's instance using this syntax:</p> <pre><code>&lt;?php \nuse Illuminate\\Support\\Facades\\Auth;\n\n$user = Auth::user(); // this is equivalent with auth()-&gt;user()\n</code></pre> <p>atau <code>auth()</code>. Penggunaan dengan blade</p> <pre><code>{{ auth()-&gt;user()-&gt;name }}\n</code></pre> <p>If you want to get only the authenticated user's id you can use this syntax:</p> <pre><code>&lt;?php \nuse Illuminate\\Support\\Facades\\Auth;\n\n$user = Auth::id(); // this is equivalent with auth()-&gt;id()\n</code></pre> <p>You can also determine if the user already logged in by using check() method. This method will return true if the user authenticated. Otherwise it will return false.</p> <pre><code>&lt;?php \nuse Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::check()) {\n// The user is logged in.\n} else {\n// The user is not logged in.\n}\n</code></pre>"},{"location":"auth_visibility/#using-request-instance","title":"Using Request Instance","text":"<p>You can retrieve the current user's instance via Request instance like this.</p> <pre><code>&lt;?php \nuse Illuminate\\Http\\Request;\n\npublic function store(Request $request)\n{\n    $user = $request-&gt;user();\n}\n</code></pre> <p>You can also retrieve the current user's instance via request global helper function like this.</p> <pre><code>&lt;?php \npublic function store()\n{\n    $user = request()-&gt;user();\n}\n</code></pre>"},{"location":"authentication/","title":"Protecting Route","text":""},{"location":"authentication/#custom-authentication-redirection","title":"Custom Authentication Redirection","text":""},{"location":"authentication/#after-login","title":"After login","text":"<p>Simple method, change property <code>$redirectTo</code> di file <code>app\\Http\\Controllers\\Auth\\LoginController.php</code>.</p> <pre><code>protected $redirectTo = RouteServiceProvider::HOME;\n</code></pre>"},{"location":"authentication/#after-logout","title":"After logout","text":"<p>Redirect user back to login page . Tambahkan method berikut ke file <code>app\\Http\\Controllers\\Auth\\LoginController.php</code></p> <pre><code>&lt;?php \nprotected function loggedOut(Request $request)\n{\n    return redirect('/login');\n}\n</code></pre>"},{"location":"authentication/#protecting-route","title":"Protecting Route","text":""},{"location":"authentication/#method-1-attaching-the-auth-middleware-in-routes-definition","title":"Method 1 : Attaching the <code>auth</code> middleware in routes definition","text":"<p>Append middleware ke route </p> <pre><code>&lt;?php \nRoute::get('contacts', [\\App\\Http\\Controllers\\ContactController::class, 'index'])-&gt;name('contacts.index')-&gt;middleware('auth');\n</code></pre> <p>atau masukkan semua route dalam group seperti berikut</p> <pre><code>&lt;?php \nRoute::middleware('auth')-&gt;group(function () {\n    Route::get('/contacts', [ContactController::class, 'index'])-&gt;name('contacts.index');\n}\n\n// or\nRoute::get('/contacts', [ContactController::class, 'index'])-&gt;name('contacts.index')-&gt;middleware('auth');\n</code></pre>"},{"location":"authentication/#method-2-calling-the-auth-middleware-in-controllers-constructor","title":"Method 2 : Calling the <code>auth</code> middleware in controller's constructor","text":"<p>Before we call the auth middleware in our constructor's controller, make sure you're not call the middleware('auth') in your route definition.</p> <pre><code>&lt;?php \nclass ContactController extends Controller\n{\n    public function __construct()\n    {\n        $this-&gt;middleware('auth');\n    }\n\n    // other methods definition\n    // ...\n}\n</code></pre> <p>apply auth to certain method</p> <pre><code>&lt;?php \npublic function __construct()\n{\n    $this-&gt;middleware('auth')-&gt;only('create', 'update', 'destroy');\n}\n</code></pre> <p>or <code>except</code> method</p> <pre><code>&lt;?php \npublic function __construct()\n{\n    $this-&gt;middleware('auth')-&gt;except('index', 'show');\n}\n</code></pre>"},{"location":"blade/","title":"Blade","text":""},{"location":"blade/#escaped-html","title":"Escaped HTML","text":"<pre><code>{!! $message !!}\n</code></pre>"},{"location":"breadcrumb/","title":"Breadcrumb","text":"<p>Breadcumb adalah navigation dibahagian atas setiap page yang memberikan bantuan navigasi. Ia akan membantu user untuk memahami dimanakah mereka berada.</p> <p>Laksana arahan berikut</p> <pre><code>php artisan make:component Breadcrumb\n</code></pre> <p>akan create file di lokasi berikut <code>app\\View\\Components\\Breadcrumb.php</code> dan <code>resources\\views\\components\\bredcrumb.blade.php</code></p> <p>Masukkan code berikut <code>app\\View\\Components\\Breadcrumb.php</code></p> <pre><code>&lt;?php \n\nnamespace App\\View\\Components;\n\nuse DOMDocument;\nuse Illuminate\\View\\Component;\n\nclass Breadcrumb extends Component\n{\n    const HOME = 'home';\n\n    public $breadStack = [];\n\n    public $type;\n\n    /**\n     * Create a new component instance.\n     *\n     * @return void\n     */\n    public function __construct($type = '')\n    {\n        $this-&gt;breadStack = session()-&gt;get('breadstack', []);\n\n        if ($type == 'root') {\n            $this-&gt;breadStack = [];\n        }\n    }\n\n    public function stack($slot)\n    {\n        $newStack = [];\n\n        // Create a new DOM Document\n        $xml = new DOMDocument();\n\n        // Load the html contents into the DOM\n        $xml-&gt;loadHTML($slot);\n\n        // Empty array to hold all links to return\n        $stack = array();\n\n        //Loop through each &lt;li&gt; tag in the dom\n        foreach ($xml-&gt;getElementsByTagName('li') as $li) {\n            //Loop through each &lt;a&gt; tag within the li, then extract the node value\n            if (!$li-&gt;getElementsByTagName('a')-&gt;item(0)) {\n                $stack[url()-&gt;current()] = $this-&gt;item($li-&gt;nodeValue, url()-&gt;current());\n            } else {\n                foreach ($li-&gt;getElementsByTagName('a') as $links) {\n                    $stack[$links-&gt;getAttribute('href')] = $this-&gt;item($links-&gt;nodeValue, $links-&gt;getAttribute('href'));\n                }\n            }\n        }\n\n\n        $tmpStack = array_merge($this-&gt;breadStack, $stack);\n        foreach ($tmpStack as $key =&gt; $val) {\n            $newStack[$key] = $val;\n            $breadcrumb[$key] = $val;\n\n            if (url()-&gt;current() == $key) {\n                $breadcrumb[$key] = $this-&gt;item(strip_tags($val));\n                break;\n            }\n        }\n\n        session()-&gt;put('breadstack', $newStack);\n\n        return implode($breadcrumb);\n    }\n\n    /**\n     * Get the view / contents that represent the component.\n     *\n     * @return \\Illuminate\\Contracts\\View\\View|\\Closure|string\n     */\n    public function render()\n    {\n        return view('components.breadcrumb');\n    }\n\n    private function item($item, $link = '')\n    {\n        if ($link) $item = \"&lt;a href='$link'&gt;$item&lt;/a&gt;\";\n        return \"&lt;li class='breadcrumb-item'&gt;$item&lt;/li&gt;\";\n    }\n}\n</code></pre> <p>Masukkan code berikut di <code>resources\\views\\components\\bredcrumb.blade.php</code></p> <pre><code>&lt;?php \n&lt;ol {{ $attributes-&gt;merge([\n    'class' =&gt; 'breadcrumb page-breadcrumb'\n    ]) }}&gt;\n    &lt;li class=\"breadcrumb-item\"&gt;&lt;a href=\"{{ route('home') }}\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    {!! $stack($slot) !!}\n    &lt;li class=\"position-absolute pos-top pos-right d-none d-sm-block\"&gt;&lt;span class=\"js-get-date\"&gt;&lt;/span&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"breadcrumb/#penggunaan","title":"Penggunaan","text":"<p>Masukkan breadcrumb component di permulaan page contoh <code>index</code>  seperti berikut : </p> <pre><code>&lt;?php \n&lt;x-breadcrumb type=\"root\"&gt;\n    &lt;li&gt;Senarai Kontrak&lt;/li&gt;\n&lt;/x-breadcrumb&gt;\n</code></pre> <p>Untuk page kedua selepas page <code>index</code>, <code>type=\"root\"</code> tidak diperlukan :</p> <pre><code>&lt;?php\n&lt;x-breadcrumb&gt;\n    &lt;li class=\"breadcrumb-item\"&gt;Page 2&lt;/li&gt;\n&lt;/x-breadcrumb&gt;\n</code></pre> <p>Apabila <code>page 2</code> diakses selepas page index breadcrumb akan menunjukkan navigation seperti berikut : </p> <pre><code>Home &gt; Senarai Kontrak &gt; Page 2\n</code></pre>"},{"location":"code_complete/","title":"Code Complete","text":"<p>Code yang sudah lengkap sepanjang kelas akan dikongsi di URL ini : </p> <p>Day 1 : Route + Calculator + Template</p> <pre><code>https://github.com/akusaiful/laravel-code\n</code></pre> <p>Day 2, 3 dan 4 : Complete System</p> <pre><code>https://github.com/akusaiful/laravel-crud.git\n</code></pre>"},{"location":"code_complete/#clone-project-step","title":"Clone Project Step","text":"<p>Langkah untuk clone dari github</p>"},{"location":"code_complete/#1-clone-project","title":"1. Clone Project","text":"<p>Clone dekat folder yang dikehendaki</p> <pre><code>github clone https://github.com/akusaiful/laravel-crud.git\n</code></pre>"},{"location":"code_complete/#2-run-composer","title":"2 . Run composer","text":"<p>Masuk ke directory <code>laravel-crud</code> selepas clone. Run arahan berikut : </p> <pre><code>composer update\n</code></pre>"},{"location":"code_complete/#3-copyrename-file-envexample","title":"3. Copy/rename file <code>.env.example</code>","text":"<p>Copy file <code>.env.example</code> kepada <code>.env</code> . Lengkapkan file config seperti nama database, db password dan sebagainya. Pastikan nama database telah dibuat di phpmyadmin/db</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laraveldb-create-db-dalam-mysql\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre>"},{"location":"code_complete/#4-jana-laravel-key","title":"4. Jana laravel key","text":"<pre><code>php artisan key:generate\n</code></pre>"},{"location":"code_complete/#5-run-migration-table","title":"5. Run migration table","text":"<p>Migration table akan create semua table yang diperlukan oleh sistem ke database</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"composer/","title":"Composer","text":"<p>Remove package </p> <pre><code>composer remove vendor/package\n</code></pre> <p>Composer - clear cache </p> <pre><code>composer dump-autoloads\n</code></pre>"},{"location":"controller/","title":"Controllers","text":""},{"location":"controller/#create-controller","title":"Create Controller","text":"<p>Create controller with resource method</p> <pre><code>php artisan make:controller CompanyController --resource\n// php artisan make:controller CompanyController -r\n</code></pre> <p>Create controller with full resource method and model binding</p> <pre><code>php artisan make:controller CompanyController --model=Company\n</code></pre>"},{"location":"controller/#redirect-from-controller","title":"Redirect from controller","text":"<p>Redirect to other named route with keyname varible as session</p> <pre><code>redirect()-&gt;route('name.route', [$paramenter])-&gt;with('keyname', $value);\n</code></pre> <p>Untuk paparkan message dalam view </p> <pre><code>$message = session('keyname');\n</code></pre>"},{"location":"controller/#contructor-call-middleware","title":"Contructor call middleware","text":"<pre><code>public function __construct()\n{   \n    $this-&gt;middleware('auth');\n}\n</code></pre>"},{"location":"crud_explain/","title":"CRUD","text":"<p>Create controller</p> <pre><code>php artisan make:controller ContactController -r\n</code></pre> <p>untuk melaksanakan operasi CRUD, 7 method dan verb seperti berikut diperlukan :</p> <ol> <li><code>index()</code> - <code>GET</code></li> <li><code>create()</code> - <code>GET</code></li> <li><code>store()</code> - <code>POST</code></li> <li><code>show()</code> - <code>GET</code></li> <li><code>edit()</code> - <code>GET</code></li> <li><code>update()</code> - <code>PUT</code></li> <li><code>destroy()</code> - <code>DELETE</code></li> </ol>"},{"location":"crud_explain/#index","title":"Index","text":"<p>Route</p> <pre><code>&lt;?php\nRoute::get('contacts/index', [Contactontroller::class, 'index'])-&gt;name('contacts.index');\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\npublic function index()\n{\n    return view('contact.index', ['contacts' =&gt; Contact::paginate(10)]);\n}\n</code></pre> <p>View</p> <pre><code>&lt;table class=\"table\"&gt;\n  &lt;thead&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Email&lt;/th&gt;\n    &lt;th&gt;&lt;/th&gt;\n  &lt;/thead&gt;\n  @if($contacts-&gt;total()) @foreach ($contacts as $contact)\n  &lt;tr&gt;\n    &lt;td&gt;{{ $contact-&gt;name }}&lt;/td&gt;\n    &lt;td&gt;{{ $contact-&gt;email }}&lt;/td&gt;\n    &lt;td&gt;&lt;a href=\"{{ route('contacts.show', $contact-&gt;id) }}\"&gt;View&lt;/a&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  @endforeach @else\n  &lt;tr&gt;\n    &lt;td colspan=\"3\"&gt;Tiada rekod&lt;/td&gt;\n  &lt;/tr&gt;\n  @endif\n&lt;/table&gt;\n\n{{ $contacts-&gt;links() }}\n</code></pre> <p>TIPS : Render pagination page</p> <p>See Pagination topic</p>"},{"location":"crud_explain/#view","title":"View","text":"<p>View - link to route</p> <pre><code>&lt;a\n  href=\"{{ route('contacts.view', $contact-&gt;id) }}\"\n  class=\"btn btn-sm btn-circle btn-outline-info\"\n  title=\"Show\"\n  &gt;&lt;i class=\"fa fa-eye\"&gt;&lt;/i\n&gt;&lt;/a&gt;\n</code></pre> <p>Route</p> <pre><code>&lt;?php\nRoute::get('/contacts/{id}', [\\App\\Http\\Controllers\\ContactController::class, 'view'])-&gt;name('contacts.view');\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\npublic function view($id)\n{\n    $contact = \\App\\Models\\Contact::findOrFail($id);\n    return view('contacts.view', compact('contact'));\n}\n</code></pre> <p>Blade - view record</p> <pre><code>&lt;div class=\"card-body\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-md-12\"&gt;\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label for=\"name\" class=\"col-md-3 col-form-label\"&gt;Name&lt;/label&gt;\n        &lt;div class=\"col-md-9\"&gt;\n          &lt;p class=\"form-control-plaintext text-muted\"&gt;\n            {{ $contact-&gt;name }}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label for=\"email\" class=\"col-md-3 col-form-label\"&gt;Email&lt;/label&gt;\n        &lt;div class=\"col-md-9\"&gt;\n          &lt;p class=\"form-control-plaintext text-muted\"&gt;{{ $contact-&gt;email }}&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label for=\"phone\" class=\"col-md-3 col-form-label\"&gt;Phone&lt;/label&gt;\n        &lt;div class=\"col-md-9\"&gt;\n          &lt;p class=\"form-control-plaintext text-muted\"&gt;{{ $contact-&gt;phone }}&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label for=\"name\" class=\"col-md-3 col-form-label\"&gt;Address&lt;/label&gt;\n        &lt;div class=\"col-md-9\"&gt;\n          &lt;p class=\"form-control-plaintext text-muted\"&gt;\n            {{ $contact-&gt;address }}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;hr /&gt;\n      &lt;div class=\"form-group row mb-0\"&gt;\n        &lt;div class=\"col-md-9 offset-md-3\"&gt;\n          &lt;a href=\"{{ route('contacts.edit', $contact-&gt;id) }}\" class=\"btn btn-info\"&gt;Edit&lt;/a&gt;\n          &lt;a href=\"#\" class=\"btn btn-outline-danger\"&gt;Delete&lt;/a&gt;\n          &lt;a href=\"{{ route('contacts.index') }}\" class=\"btn btn-outline-secondary\"&gt;Cancel&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"crud_explain/#update","title":"Update","text":"<p>View - link to route</p> <pre><code>&lt;a href=\"{{ route('contacts.edit', $contact-&gt;id) }}\" class=\"btn btn-sm btn-circle btn-outline-info\" title=\"Show\"&gt;Edit&lt;/a&gt;\n</code></pre> <p>Route</p> <pre><code>&lt;?php\n// Edit - show form\nRoute::get('/contacts/edit/{id}', [\\App\\Http\\Controllers\\ContactController::class, 'edit'])-&gt;name('contacts.edit');\n\n// Update\nRoute::put('/contacts/{id}', [\\App\\Http\\Controllers\\ContactController::class, 'update'])-&gt;name('contacts.update');\n</code></pre> <p>Form</p> <pre><code>&lt;form action=\"{{ route('contacts.update', $contact-&gt;id) }}\" method=\"POST\"&gt;\n  @method('PUT') @csrf\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-md-12\"&gt;\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label for=\"name\" class=\"col-md-3 col-form-label\"&gt;Name&lt;/label&gt;\n        &lt;div class=\"col-md-9\"&gt;\n          &lt;input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            class=\"form-control @error('name') is-invalid @enderror\"\n            value=\"{{ old('name', $contact-&gt;name) }}\"\n          /&gt;\n          @error('name')\n          &lt;div class=\"invalid-feedback\"&gt;{{ $message }}&lt;/div&gt;\n          @enderror\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group row mb-0\"&gt;\n        &lt;div class=\"col-md-9 offset-md-3\"&gt;\n          &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n            {{ $contact-&gt;exists? 'Update' : 'Save' }}\n          &lt;/button&gt;\n          &lt;a\n            href=\"{{ route('contacts.index') }}\"\n            class=\"btn btn-outline-secondary\"\n            &gt;Cancel&lt;/a\n          &gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Model</p> <pre><code>// senarai property untuk massive assign dari $request-&gt;all()\nprotected $fillable = ['name', 'email', 'phone', 'address', 'company_id'];\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\n\npublic function edit($id)\n{\n    return view('contact.edit', ['contact' =&gt; Contact::findOrFail($id)]);\n}\n\npublic function update(Request $request, $id)\n{\n    return $this-&gt;save($request, $id);\n}\n\n...\n\nprivate function save(Request $request, $id = '')\n{\n    $request-&gt;validate([\n        'name' =&gt; 'required',\n        'email' =&gt; 'required | email',\n        'address' =&gt; 'required',\n        'company_id' =&gt; 'required|exists:companies,id'\n\n    ]);\n\n    if($id) {\n        Contact::query()-&gt;find($id)-&gt;update($request-&gt;all());\n        $msg = \"Contact has been updated successfully.\";\n    }else{\n        Contact::create($request-&gt;all());\n        $msg = \"Contact has been added successfully.\";\n    }\n\n    return redirect()-&gt;route('contacts.index')-&gt;with('message', $msg);\n}\n</code></pre>"},{"location":"crud_explain/#create","title":"Create","text":"<p>View</p> <pre><code>&lt;a href=\"{{ route('contacts.create') }}\"&gt;Create&lt;/a&gt;\n</code></pre> <p>Route</p> <pre><code>// Create\nRoute::get('/contacts/create', [ContactController::class, 'create'])-&gt;name('contacts.create');\n\n// Store data\nRoute::post('/contacts/store', [\\App\\Http\\Controllers\\ContactController::class, 'store'])-&gt;name('contacts.store');\n</code></pre> <p>Letakkan meta di main layout (optional)</p> <pre><code>&lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n</code></pre> <p>Create form</p> <pre><code>&lt;form action=\"{{ route('contacts.store') }}\" method=\"POST\"&gt;\n  // Insert hidden field @csrf // inlucde contact form view\n  @include('contacts._form')\n&lt;/form&gt;\n</code></pre> <p>Model </p> <pre><code>protected $fillable = ['name', 'email', 'phone', 'address', 'company_id'];\n</code></pre> <p>Form </p> <p>Validation untuk INPUT </p> <pre><code>&lt;div class=\"row\"&gt;\n  &lt;div class=\"col-md-12\"&gt;\n    &lt;div class=\"form-group row\"&gt;\n      &lt;label for=\"name\" class=\"col-md-3 col-form-label\"&gt;Name&lt;/label&gt;\n      &lt;div class=\"col-md-9\"&gt;\n        &lt;input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          class=\"form-control @error('name') is-invalid @enderror\"\n          value=\"{{ old('name') }}\"\n        /&gt;\n        @error('name')\n        &lt;div class=\"invalid-feedback\"&gt;{{ $message }}&lt;/div&gt;\n        @enderror\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n````\n\nValidation untuk SELECT\n\n```html\n&lt;div class=\"form-group row\"&gt;\n    &lt;label for=\"company_id\" class=\"col-md-3 col-form-label\"&gt;Company&lt;/label&gt;\n    &lt;div class=\"col-md-9\"&gt;\n        &lt;select name=\"company_id\" id=\"company_id\" class=\"form-control @error('company_id') is-invalid @enderror\"&gt;\n            @foreach($companies as $id =&gt; $name)\n                &lt;option {{ $id == old('company_id')? 'selected' : '' }} value=\"{{ $id }}\"&gt;{{ $name }}&lt;/option&gt;\n            @endforeach\n        &lt;/select&gt;\n            @error('company_id')\n            &lt;div class=\"invalid-feedback\"&gt;\n                {{ $message }}\n            &lt;/div&gt;\n            @enderror\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Create controller untuk menyimpan rekod</p> <pre><code>&lt;?php\nuse Illuminate\\Validation\\Rule;\n\npublic function store(Request $request)\n{\n    // form rules\n    $request-&gt;validate([\n        'first_name' =&gt; 'required',\n        // unique:table,column,ignore-record-id\n        // 'code' =&gt; 'required|unique:book_types,code,' . $request-&gt;id,\n        'code' =&gt; ['required', Rule::unique('book_types')-&gt;ignore($request-&gt;id)],\n        'last_name' =&gt; 'required',\n        'email' =&gt; 'required | email',\n        'address' =&gt; 'required',\n        'company_id' =&gt; 'required|exists:companies,id'\n\n    ]);\n    // $contact = new Contact();\n    // $contact-&gt;create($requst-&gt;all());\n    $contact = Contact::create($request-&gt;all());\n    return redirect()-&gt;route('contacts.show', $contact-&gt;id)-&gt;with('msg', 'Success');\n\n    // dd($request-&gt;all());\n    // dd($request-&gt;only('first_name', 'last_name'));\n    // dd($request-&gt;except('first_name', 'last_name'));\n}\n</code></pre>"},{"location":"crud_explain/#delete","title":"Delete","text":"<ol> <li> <p>Delete using POST</p> <p>View</p> <pre><code>&lt;form action=\"{{ route('phones.destroy', $phone-&gt;id) }}\" method=\"POST\" class=\"form-inline-block\" id=\"frm-delete\"&gt;\n  @method('DELETE') @csrf\n  &lt;a href=\"{{ route('phones.edit', $phone-&gt;id) }}\" class=\"btn btn-outline-primary\"&gt;Edit&lt;/a&gt;\n  &lt;a href=\"{{ session('prev-url') }}\" class=\"btn btn-outline-primary\"&gt;Back&lt;/a&gt;\n  &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-outline-danger\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Route</p> <pre><code>Route::delete('phones/destroy', [PhoneController::class, 'destroy'])-&gt;name('phones.destroy)\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\npublic function destroy(Phone $phone)\n{\n    $phone-&gt;delete();\n    return redirect()-&gt;to(session('prev-url'))-&gt;with('message', 'Delete done');\n}\n</code></pre> </li> <li> <p>Delete Using JS</p> <p>Route <code>web.php</code></p> <pre><code>&lt;?php\nRoute::delete('/contacts/{id}', [\\App\\Http\\Controllers\\ContactController::class, 'delete'])-&gt;name('contacts.delete');\n</code></pre> <p>Blade</p> <pre><code>&lt;a\n  href=\"{{ route('contacts.delete', $contact-&gt;id) }}\"\n  class=\"btn-delete btn btn-sm btn-circle btn-outline-danger\"\n  title=\"Delete\"\n  &gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i\n&gt;&lt;/a&gt;\n\n.....\n\n&lt;form id=\"form-delete\" method=\"POST\" style=\"display: none\"&gt;\n  @method('DELETE') @csrf\n&lt;/form&gt;\n</code></pre> <p>JS <code>public\\js\\app.js</code></p> <pre><code>document.querySelectorAll(\".btn-delete\").forEach((button) =&gt; {\n  button.addEventListener(\"click\", function (event) {\n    event.preventDefault();\n    if (confirm(\"Are you sure\")) {\n      let action = this.getAttribute(\"href\");\n      let form = document.getElementById(\"form-delete\");\n      form.setAttribute(\"action\", action);\n      form.submit();\n    }\n  });\n});\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\npublic function delete($id)\n{\n    Contact::query()-&gt;findOrFail($id)-&gt;delete();\n    return back()-&gt;with('message', 'Contact has been deleted successfully.');\n}\n</code></pre> </li> </ol>"},{"location":"crud_explain/#final-route","title":"Final Route","text":"<pre><code>&lt;?php\n// States\nRoute::get('state/index', [StateController::class, 'index'])-&gt;name('state.index');\nRoute::get('state/create', [StateController::class, 'create'])-&gt;name('state.create');\nRoute::get('state/{id}', [StateController::class, 'show'])-&gt;name('state.show');\nRoute::get('state/edit/{id}', [StateController::class, 'edit'])-&gt;name('state.edit');\nRoute::post('state/store', [StateController::class, 'store'])-&gt;name('state.store');\nRoute::put('state/{id}', [StateController::class, 'update'])-&gt;name('state.update');\nRoute::delete('state/{id}', [StateController::class, 'destroy'])-&gt;name('state.destroy');\n</code></pre>"},{"location":"crud_full/","title":"CRUD Example","text":""},{"location":"crud_full/#controller","title":"Controller","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\State;\nuse Illuminate\\Http\\Request;\n\nclass StateController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        session(['url.paginate' =&gt; url()-&gt;full()]);\n        $states = State::paginate(8);\n        return view('state.index')-&gt;with('states', $states);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        return view('state.create')-&gt;with('state', new State());\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        return $this-&gt;save($request);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        return view('state.show')-&gt;with('state', State::find($id));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        return view('state.edit')-&gt;with('state', State::find($id));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        return $this-&gt;save($request);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        State::destroy($id);\n        return redirect()-&gt;route('state.index')-&gt;with('message','Deleted!');\n    }\n\n    public function save(Request $request)\n    {\n        $request-&gt;validate([\n            'code' =&gt; 'required',\n            'name' =&gt; 'required'\n        ]);\n\n        if($request-&gt;id){\n            ($state = State::find($request-&gt;id))-&gt;update($request-&gt;all());\n        }else{\n            $state = State::create($request-&gt;all());\n        }\n\n        return redirect()-&gt;route('state.show', $state-&gt;id);\n    }\n}\n</code></pre>"},{"location":"crud_full/#model","title":"Model","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass State extends Model\n{\n    use HasFactory;\n\n    protected $fillable = ['code', 'name'];\n\n    public $timestamps = false;\n\n    public function warehouses()\n    {\n        return $this-&gt;hasMany(Warehouse::class);\n    }\n\n    public function getName()\n    {\n        return $this-&gt;id . ' - ' . $this-&gt;name;\n    }\n\n}\n</code></pre>"},{"location":"crud_full/#view","title":"View","text":""},{"location":"crud_full/#index","title":"Index","text":"<pre><code>&lt;div class=\"'Expressway Companies'-index\"&gt;\n  &lt;p class=\"text-right\"&gt;\n    &lt;a\n      class=\"btn btn-outline-primary waves-effect waves-themed\"\n      href=\"{{ route('state.create') }}\"\n      &gt;Create&lt;/a\n    &gt;\n  &lt;/p&gt;\n\n  @if($message = session()-&gt;get('message'))\n  &lt;div class=\"alert bg-primary-200 text-white\"&gt;{{ $message }}&lt;/div&gt;\n  @endif\n\n  &lt;div\n    id=\"p0\"\n    data-pjax-container=\"\"\n    data-pjax-push-state=\"\"\n    data-pjax-timeout=\"1000\"\n  &gt;\n    &lt;div id=\"w0\" class=\"table-responsive\"&gt;\n      &lt;table class=\"table table-striped table-bordered table-hover\"&gt;\n        &lt;thead&gt;\n          &lt;tr class=\"thead-dark\"&gt;\n            &lt;th width=\"2%\"&gt;ID&lt;/th&gt;\n            &lt;th width=\"10%\"&gt;Code&lt;/th&gt;\n            &lt;th width=\"80%\"&gt;Name&lt;/th&gt;\n\n            &lt;th class=\"action-column\"&gt;&amp;nbsp;&lt;/th&gt;\n          &lt;/tr&gt;\n          &lt;tr id=\"w0-filters\" class=\"filters\"&gt;\n            &lt;td&gt;\n              &lt;input\n                type=\"text\"\n                class=\"form-control\"\n                name=\"ExpresswayCompanySearch[id]\"\n              /&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n              &lt;input\n                type=\"text\"\n                class=\"form-control\"\n                name=\"ExpresswayCompanySearch[name]\"\n              /&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n              &lt;input\n                type=\"text\"\n                class=\"form-control\"\n                name=\"ExpresswayCompanySearch[address]\"\n              /&gt;\n            &lt;/td&gt;\n            &lt;td&gt;&amp;nbsp;&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          @foreach($states as $type)\n          &lt;tr data-key=\"1\"&gt;\n            &lt;td style=\"text-align:left\"&gt;{{ $type-&gt;id }}&lt;/td&gt;\n            &lt;td&gt;{{ $type-&gt;code }}&lt;/td&gt;\n            &lt;td&gt;{{ $type-&gt;name }}&lt;/td&gt;\n            &lt;td width=\"5%\" style=\"text-align:center\" nowrap=\"nowrap\"&gt;\n              &lt;a\n                href=\"{{ route('state.show', $type-&gt;id) }}\"\n                title=\"View\"\n                aria-label=\"View\"\n                data-pjax=\"0\"\n                &gt;&lt;span class=\"fal fa-search\"&gt;&lt;/span\n              &gt;&lt;/a&gt;\n              &lt;a\n                href=\"{{ route('state.edit', $type-&gt;id) }}\"\n                title=\"Update\"\n                aria-label=\"Update\"\n                data-pjax=\"0\"\n                &gt;&lt;span class=\"fal fa-pencil\"&gt;&lt;/span\n              &gt;&lt;/a&gt;\n              &lt;a\n                href=\"{{ route('state.destroy', $type-&gt;id) }} \"\n                title=\"Delete\"\n                class=\"btn-delete\"\n                &gt;&lt;span class=\"fal fa-trash-alt\"&gt;&lt;/span\n              &gt;&lt;/a&gt;\n            &lt;/td&gt;\n\n            &lt;form style=\"display: none\" id=\"form-delete\" method=\"POST\"&gt;\n              @csrf @method('DELETE')\n            &lt;/form&gt;\n          &lt;/tr&gt;\n          @endforeach\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  {{ $states-&gt;links() }}\n&lt;/div&gt;\n</code></pre>"},{"location":"crud_full/#create-form","title":"Create Form","text":"<pre><code>&lt;div id=\"panel-1\" class=\"panel\"&gt;\n  &lt;div class=\"panel-hdr\"&gt;\n    &lt;h2&gt;\n      Create &lt;span class=\"fw-300\"&gt;&lt;i&gt;Book Type&lt;/i&gt;&lt;/span&gt;\n    &lt;/h2&gt;\n    &lt;div class=\"panel-toolbar\"&gt;\n      &lt;button\n        class=\"btn btn-panel waves-effect waves-themed\"\n        data-action=\"panel-collapse\"\n        data-toggle=\"tooltip\"\n        data-offset=\"0,10\"\n        data-original-title=\"Collapse\"\n      &gt;&lt;/button&gt;\n      &lt;button\n        class=\"btn btn-panel waves-effect waves-themed\"\n        data-action=\"panel-fullscreen\"\n        data-toggle=\"tooltip\"\n        data-offset=\"0,10\"\n        data-original-title=\"Fullscreen\"\n      &gt;&lt;/button&gt;\n      &lt;button\n        class=\"btn btn-panel waves-effect waves-themed\"\n        data-action=\"panel-close\"\n        data-toggle=\"tooltip\"\n        data-offset=\"0,10\"\n        data-original-title=\"Close\"\n      &gt;&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"panel-container show\"&gt;\n    &lt;div class=\"panel-content\"&gt;\n      &lt;div class=\"panel-tag\"&gt;\n        Be sure to use an appropriate type attribute on all inputs (e.g., code\n        &lt;code&gt;email&lt;/code&gt; for email address or &lt;code&gt;number&lt;/code&gt; for\n        numerical information) to take advantage of newer input controls like\n        email verification, number selection, and more.\n      &lt;/div&gt;\n\n      &lt;form action=\"{{ route('state.store') }}\" method=\"POST\"&gt;\n        @csrf\n        @include('state._form')\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"crud_full/#partial-_formbladephp","title":"Partial _form.blade.php","text":"<pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label class=\"form-label\" for=\"simpleinput\"&gt;Code&lt;/label&gt;\n    &lt;input type=\"text\" id=\"code\" name=\"code\" class=\"form-control @error('code') is-invalid @enderror\" value=\"{{ old('code', $state-&gt;code) }}\"&gt;\n    @error('code')\n    &lt;div class=\"invalid-feedback\"&gt;\n        {{ $message }}\n    &lt;/div&gt;\n\n    @enderror\n&lt;/div&gt;\n&lt;div class=\"form-group\"&gt;\n    &lt;label class=\"form-label\" for=\"example-email-2\"&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\" class=\"form-control @error('name') is-invalid @enderror\" placeholder=\"Name\" value=\"{{ old('name', $state-&gt;name) }}\"&gt;\n    @error('name')\n    &lt;div class=\"invalid-feedback\"&gt;\n    {{ $message }}\n    &lt;/div&gt;\n    @enderror\n&lt;/div&gt;\n&lt;div class=\"text-right\"&gt;\n    &lt;a href=\"{{ session()-&gt;get('url.paginate', route('state.index')) }}\" class=\"btn btn-outline-primary\"&gt;Cancel&lt;/a&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary waves-effect waves-themed\"&gt;Update&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"crud_full/#update-form","title":"Update Form","text":"<pre><code>@extends('layouts.switch')\n\n@section('content')\n&lt;div id=\"panel-1\" class=\"panel\"&gt;\n    &lt;div class=\"panel-hdr\"&gt;\n        &lt;h2&gt;\n            Edit &lt;span class=\"fw-300\"&gt;&lt;i&gt;{{ $state-&gt;getName() }}&lt;/i&gt;&lt;/span&gt;\n        &lt;/h2&gt;\n        &lt;div class=\"panel-toolbar\"&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-collapse\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Collapse\"&gt;&lt;/button&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-fullscreen\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Fullscreen\"&gt;&lt;/button&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-close\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Close\"&gt;&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"panel-container show\"&gt;\n        &lt;div class=\"panel-content\"&gt;\n            &lt;div class=\"panel-tag\"&gt;\n                Be sure to use an appropriate type attribute on all inputs (e.g., code &lt;code&gt;email&lt;/code&gt; for email address or &lt;code&gt;number&lt;/code&gt; for numerical information) to take advantage of newer input controls like email verification, number selection, and more.\n            &lt;/div&gt;\n            &lt;form action=\"{{ route('state.update', $state-&gt;id) }}\" method=\"POST\"&gt;\n                @method('PUT')\n                @csrf\n                @include('state._form')\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@endsection\n</code></pre>"},{"location":"crud_full/#show","title":"Show","text":"<pre><code>@extends('layouts.switch')\n\n@section('content')\n&lt;div id=\"panel-1\" class=\"panel\"&gt;\n    &lt;div class=\"panel-hdr\"&gt;\n        &lt;h2&gt;{{ $state-&gt;getName() }}&lt;/h2&gt;\n        &lt;div class=\"panel-toolbar\"&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-collapse\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Collapse\"&gt;&lt;/button&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-fullscreen\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Fullscreen\"&gt;&lt;/button&gt;\n            &lt;button class=\"btn btn-panel waves-effect waves-themed\" data-action=\"panel-close\" data-toggle=\"tooltip\" data-offset=\"0,10\" data-original-title=\"Close\"&gt;&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"panel-container show\"&gt;\n        &lt;div class=\"panel-content\"&gt;\n            &lt;div class=\"panel-tag\"&gt;\n                Using the most basic table markup, here\u2019s how &lt;code&gt;.table&lt;/code&gt;-based tables look in SmartAdmin. You can inverse a table by using the class &lt;code&gt;.table-dark&lt;/code&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"frame-wrap\"&gt;\n                &lt;table class=\"table m-0\"&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n                            &lt;th width='10%'&gt;NO&lt;/th&gt;\n                            &lt;th&gt;INFO&lt;/th&gt;                            \n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        &lt;tr&gt;\n                            &lt;th scope=\"row\"&gt;ID&lt;/th&gt;\n                            &lt;td&gt;{{ $state-&gt;id }}&lt;/td&gt;\n\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;th scope=\"row\"&gt;Code&lt;/th&gt;\n                            &lt;td&gt;{{ $state-&gt;code }}&lt;/td&gt; \n\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;th scope=\"row\"&gt;state&lt;/th&gt;\n                            &lt;td&gt;{{ $state-&gt;name }}&lt;/td&gt;\n\n                        &lt;/tr&gt;                        \n\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"text-right\"&gt;\n            &lt;a href=\"{{ session()-&gt;get('url.paginate', route('state.index')) }}\" class=\"btn btn-outline-primary\"&gt;List&lt;/a&gt;\n            &lt;a href=\"{{ route('state.edit', ['id' =&gt; $state-&gt;id] ) }}\" class=\"btn btn-outline-primary\"&gt;Update&lt;/a&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n@endsection\n</code></pre>"},{"location":"crud_full/#route","title":"Route","text":"<pre><code>&lt;?php \n    // States\n    Route::get('state/index', [StateController::class, 'index'])-&gt;name('state.index');\n    Route::get('state/create', [StateController::class, 'create'])-&gt;name('state.create');\n    Route::get('state/{id}', [StateController::class, 'show'])-&gt;name('state.show');\n    Route::get('state/edit/{id}', [StateController::class, 'edit'])-&gt;name('state.edit');\n    Route::post('state/store', [StateController::class, 'store'])-&gt;name('state.store');\n    Route::put('state/{id}', [StateController::class, 'update'])-&gt;name('state.update');\n    Route::delete('state/{id}', [StateController::class, 'destroy'])-&gt;name('state.destroy');\n</code></pre>"},{"location":"database_migration/","title":"Database Migration","text":""},{"location":"database_migration/#create-table-using-migration","title":"Create Table Using <code>Migration</code>","text":"<p>Create table migration</p> <pre><code>php artisan make:migration create_stocks_table\n</code></pre> <p>File berikut akan dihasilkan <code>2022_08_30_230749_create_stocks_table.php</code> di lokasi <code>database\\migrations\\</code>. Masukkan column yang dikehendaki seperti berikut : </p> <pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateStocksTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('stocks', function (Blueprint $table) {\n            // Senarai Column\n            $table-&gt;id();\n            $table-&gt;integer('order_satus');\n            $table-&gt;string('note_order');\n            $table-&gt;string('note_hq');\n\n            // foreign column\n            $table-&gt;foreignId('user_id');\n            $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');\n            // $table-&gt;foreign('customer_id')-&gt;references('id')-&gt;on('customers');\n\n            $table-&gt;timestamp('submited_at')-&gt;useCurrent();\n\n            $table-&gt;enum('method', ['credit_card', 'paypal']);\n            $table-&gt;decimal('amount', 8, 2);\n\n            // column created_at, updated_at\n            $table-&gt;timestamps();\n        });\n    }\n\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('stocks');\n    }\n}\n</code></pre> <p>Laksanakan arahan untuk migration table tersebut (Single table). Laravel akan create table ke dalam dabatase mengikut schema yang telah ditakrifkan. </p> <pre><code>php artisan migrate --path=database/migrations/2022_10_12_035734_create_stocks_table.php\n</code></pre> <p>table yang dihasilkan akan kelihatan seperti berikut :</p> <p></p> <p>Tips</p> <p>Laravel Blueprint available method https://laravel.com/api/8.x/Illuminate/Database/Schema/Blueprint.html</p>"},{"location":"database_migration/#migration-workaround","title":"Migration workaround","text":"<p>Install migration table yang berada di <code>database\\migrations</code>. Sistem akan create table migration <code>migrations</code></p> <pre><code>php artisan migrate:install\n</code></pre> <p>Install all/changes/new tables dalam folder <code>database/migrations</code>. Sistem akan create semua table yang ada dan juga memasukkan maklumat penciptaan table ini ke table <code>migrations</code>.</p> <pre><code>php artisan migrate\n</code></pre> <p>Run seed data untuk memasukkan data ke dalam table yang telah dibuat.</p> <pre><code>php artisan db:seed \nphp artisan db:seed --class=UserSeeder\n</code></pre> <p>Rollback table migration (rollback ke 1 step batch)</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>Laravel akan rollback table yang telah di execute mengikut batch number yang tertera pada table <code>migrations</code></p> <p> </p> <p>Refresh migration file (drop table dan re-run semula migration file) dan run seed</p> <pre><code>php artisan migrate:refresh --seed\n\n// or\n</code></pre> <p>Refresh and run again migration file</p> <pre><code>php artisan migrate:fresh\n</code></pre> <p>Rollback batch ikut step</p> <pre><code>php artisan migrate:rollback --step=2\n</code></pre> <p>The migrate:reset command will roll back all of your application's migrations:</p> <pre><code>php artisan migrate:reset\n</code></pre> <p>Note</p> <p>Jika berlaku error SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table <code>users</code> add unique <code>users_email_unique</code>(<code>email</code>))</p> <p>Rujuk voyager error </p>"},{"location":"date_casting/","title":"Date Casting","text":"<p>Date Casting</p> <p>Model :  </p> <pre><code>protected $casts = [\n    'activated_at' =&gt; 'date:m/d/Y',\n    'deactivated_at' =&gt; 'date:m/d/Y',\n];\n</code></pre> <p>Akse from view : </p> <pre><code>$project-&gt;toArray()['activated_at'];\n</code></pre> <p>Read More :  https://laraveldaily.com/post/laravel-datetime-to-carbon-dates-casts</p>"},{"location":"db/","title":"Configuration","text":""},{"location":"db/#setup-db-configuration","title":"Setup DB configuration","text":"<p>open <code>/.env</code> file, configure DB variable untuk mysql : </p> <pre><code>    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=laravel\n    DB_USERNAME=root\n    DB_PASSWORD=\n</code></pre> <pre><code>   DB_CONNECTION=pgsql\n   DB_HOST=localhost\n   DB_PORT=5432\n   DB_DATABASE=laravel\n   DB_USERNAME=postgres\n   DB_PASSWORD=\n</code></pre>"},{"location":"db/#test-connection","title":"Test connection","text":"<pre><code>php artisan tinker\nDB::connection()-&gt;getPdo()\n</code></pre> <p>return status</p> <pre><code>=&gt; PDO {#4574\n inTransaction: false,\n attributes: {\n   CASE: NATURAL,\n   ERRMODE: EXCEPTION,\n   AUTOCOMMIT: 1,\n   PERSISTENT: false,\n   DRIVER_NAME: \"mysql\",\n   SERVER_INFO: \"Uptime: 252516  Threads: 1  Questions: 50  Slow queries: 0  Opens: 75  Flush tables: 1  Open tables: 68  Queries per second avg: 0.000\",\n   ORACLE_NULLS: NATURAL,\n   CLIENT_VERSION: \"mysqlnd 7.4.30\",\n   SERVER_VERSION: \"5.6.50\",\n   STATEMENT_CLASS: [\n     \"PDOStatement\",\n   ],\n   EMULATE_PREPARES: 0,\n   CONNECTION_STATUS: \"127.0.0.1 via TCP/IP\",\n   DEFAULT_FETCH_MODE: BOTH,\n },\n}\n</code></pre> <p>Reset config cache sekiranya perubahan dibuat pada file <code>.env</code> </p> <pre><code>php artisan cache:clear\n</code></pre>"},{"location":"debugging/","title":"SQL Debugging","text":""},{"location":"debugging/#sql-debugging-eloquent-queries","title":"SQL Debugging Eloquent Queries","text":"<p>Terdapat beberapa cara untuk debug SQL Query:</p> <p>Option 1 :  <code>enableQueryLog()</code></p> <pre><code>\\DB::enableQueryLog();\n// query here\ndd(\\DB::getQueryLog());\n</code></pre> <p>Option 2 : Replace <code>-&gt;get()</code> kepada <code>-&gt;toSql()</code></p> <pre><code>Contact::toSql()\n</code></pre> <p>Option 3 : add code dalam <code>app\\Providers\\AppServiceProvider</code></p> <pre><code>&lt;?php\nif (env('APP_DEBUG')) {\n    DB::listen(function ($query) {\n        Log::info($query-&gt;sql, $query-&gt;bindings, $query-&gt;time);\n    });\n}\n</code></pre> <p>lihat log : <code>storage\\logs</code> </p> <p>Option 4 : Install laravel debugbar</p> <pre><code>https://github.com/barryvdh/laravel-debugbar\n</code></pre>"},{"location":"ebook/","title":"eBook","text":"<ol> <li>Laravel_ Up &amp; Running_ A Framework for Building Modern PHP Apps ( PDFDrive )</li> <li>Learning Laravel</li> <li>Laravel Tips &amp; Trick</li> <li>Laravel 8 Documentation</li> <li>Laravel 9 Documentation</li> </ol>"},{"location":"eloquent/","title":"Eloquent Command","text":"<p>Eloquent is an object relational mapper (ORM) that is included by default within the Laravel framework. An ORM is software that facilitates handling database records by representing data as objects, working as a layer of abstraction on top of the database engine used to store an application\u2019s data.</p> <p>Read more https://laravel.com/docs/9.x/eloquent</p> <p>Note</p> <p>Class <code>Company</code> adalah merupakan nama model, tukarkan nama class kepada nama model yang bersesuaian mengikut pembangunan sistem.</p>"},{"location":"eloquent/#select","title":"Select","text":"<p>List all data</p> <pre><code>Company::all()\n</code></pre> <p>Take 3 data </p> <pre><code>Company::take(3)-&gt;get()\n</code></pre> <p>Take 3 data in all </p> <pre><code>Company::take(3)-&gt;get()-&gt;all()\n</code></pre> <p>Get first data </p> <pre><code>Company::first()\n</code></pre> <p>Get single record with ID</p> <pre><code>Company::find(1)\n</code></pre> <p>Get multiple record with ID</p> <pre><code>Company::find([1,2,3])\n</code></pre> <p>Take 3 latest </p> <pre><code>User::latest()-&gt;take(3)-&gt;get()\n</code></pre> <p>To Array</p> <pre><code>Manufacture::get()-&gt;toArray()\n</code></pre>"},{"location":"eloquent/#where","title":"Where","text":"<pre><code>Company::where('website', 'lowe.com')-&gt;first()\n</code></pre> <p>or </p> <pre><code>Company::whereWebsite('lowe.com')-&gt;first()\n\n\nManufacture::whereRaw('name like ?', ['Apple'])-&gt;get();\n</code></pre>"},{"location":"eloquent/#delete","title":"Delete","text":"<pre><code>$company = Company::find(1)\n$company-&gt;delete();\n</code></pre> <p>or </p> <pre><code>Company::destroy(11)\nCompany::destroy([1,2,3])\n</code></pre>"},{"location":"eloquent/#groupby","title":"GroupBy","text":"<pre><code>Phone::groupBy('name')-&gt;selectRaw('name, count(id) as total')-&gt;get()\n</code></pre>"},{"location":"eloquent/#orderby","title":"OrderBy","text":"<pre><code>hone::groupBy('name')-&gt;selectRaw('name, count(id) as total')-&gt;orderBy('total', 'desc')-&gt;get()\n</code></pre>"},{"location":"eloquent/#mass-assigment","title":"Mass Assigment","text":"<p>Letakkan seperti berikut untuk membolehkan property di assign </p> <pre><code>protected $guarded = [];\n</code></pre> <p>Senaraikan property yang hanya digunakan dalam mass assignment, jika ada property yang dimasukkan tapi tidak wujud dalam table, still tiada error akan dipaparkan</p> <pre><code>&lt;?php \nprotected $fillable = [\n    'name',\n    'address',\n    'website',\n    'email'\n];\n</code></pre>"},{"location":"eloquent/#relationships","title":"Relationships","text":"<p>Relationship adalah **1 to * ** (1 company mempunyai banyak contact). Define relationshop dalam migration contacts</p> <pre><code>&lt;?php \npublic function up()\n{\n    Schema::create('contacts', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('first_name');\n        $table-&gt;string('last_name');\n        $table-&gt;string('phone')-&gt;nullable();\n        $table-&gt;string('email');\n        $table-&gt;string('address');\n        // $table-&gt;unsignedBigInteger('company_id');\n        // $table-&gt;foreignId('company_id')-&gt;references('id')-&gt;on('companies')-&gt;onDelete('cascade');\n        $table-&gt;foreignId('company_id')-&gt;constrained()-&gt;onDelete('cascade');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>Define relationship method in contact model, eloquent akan assume column adalah company_id based pada nama method </p> <pre><code>public function company()\n{\n    return $this-&gt;belongsTo(Company::class);\n}\n</code></pre> <p>sekiranya nama column foreign key adalah bukan company_id </p> <pre><code>public function company()\n{\n    return $this-&gt;belongsTo(Company::class, 'nama_column_foreign_key');\n}\n</code></pre> <p>Define relationship method in company model</p> <pre><code>public function contacts()\n{\n    return $this-&gt;hasMany(Contact::class);\n}\n</code></pre> <p>Saving contacts to model, $contacts is array of contact property</p> <pre><code>$company-&gt;contacts()-&gt;createMany($contacs)\n</code></pre>"},{"location":"eloquent/#querying-relationship","title":"Querying relationship","text":"<p>Return Illuminate\\Database\\Eloquent\\Collection</p> <pre><code>$company-&gt;contacts()-&gt;get()\n</code></pre> <p>Find contact with ID</p> <pre><code>$copmany-&gt;contacts()-&gt;find(7)\n</code></pre> <p>Find last conctact in relationship</p> <pre><code>$copmany-&gt;contacts()-&gt;orderBy('id', 'desc')-&gt;first()\n</code></pre> <p>Refresh relationship </p> <pre><code>$company-&gt;load('contacts)\n</code></pre> <p>atau </p> <pre><code>$company-&gt;refresh()\n</code></pre> <p>Delete first contact in relation</p> <pre><code>$company-&gt;contacts()-&gt;first()-&gt;delete()\n</code></pre> <p>Delete all contacts in relation</p> <pre><code>$company-&gt;contacts()-&gt;delete()\n</code></pre>"},{"location":"eloquent/#pluck","title":"Pluck","text":"<pre><code>Companies::orderBy('name')-&gt;pluck('name', 'id')\n</code></pre>"},{"location":"eloquent/#eager-loding-with","title":"Eager Loding : with","text":"<p>Eager loading - load data dan relation dalam single query, eloquent by default akan load guna teknik lazy loading - hanya load bila ekses kepada property/method dalam relation. Untuk kaedah eager loading bertujuan untuk optimize query untuk performance sistem</p> <pre><code>Contact::with('company')-&gt;get();\n</code></pre>"},{"location":"eloquent/#nested-eager-loading","title":"Nested eager loading","text":"<pre><code>User::with('companies', 'companies.contacts')-&gt;get()\n</code></pre> <p>boleh juga load selepas dah create object</p> <pre><code>$user = User::take(2)-&gt;get();\n$user-&gt;load('contacts');\n</code></pre>"},{"location":"eloquent/#without","title":"without","text":"<p>Untuk remove relation yang eager loading guna property <code>with</code></p> <pre><code>User::without('contacts')-&gt;get()\n</code></pre>"},{"location":"eloquent/#counting-record-relation-using-withcount","title":"Counting record relation using <code>withCount</code>","text":"<pre><code>User::withCount(['contacts','companies'])-&gt;take(3)-&gt;get()\n\n// define column as\nUser::withCount(['contacts as contact_number','companies'])-&gt;take(3)-&gt;get()\n\n// with count condition \nUser::withCount(['contacts as contact_number','companies' =&gt; function($query){\n    $query-&gt;where('name', 'like', '%and%');\n}])-&gt;take(3)-&gt;get()\n</code></pre> <p>atau boleh load selepas object</p> <pre><code>$user-&gt;loadCount('relation')\n\n// atau\n$user-&gt;loadCount(['relation'])\n</code></pre>"},{"location":"factory/","title":"Factory","text":""},{"location":"factory/#factory","title":"Factory","text":"<p>Factory digunakan untuk menjana data bagi tujuan pembangunan dan pengujian yang lebih pantas dan mudah.</p> <p>Generate factory class </p> <pre><code>php artisan make:factory PhoneFactory\n</code></pre> <p>Code berikut akan dijana di <code>database/factories</code></p> <pre><code>&lt;?php\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass PhoneFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            //\n        ];\n    }\n}\n</code></pre> <p>Masukkan factory definition</p> <pre><code>&lt;?php\n\npublic function definition()\n    $manufacture = Manufacture::inRandomOrder()-&gt;first();        \n    return [\n        'name' =&gt; $this-&gt;faker-&gt;name . $manufacture-&gt;name,\n        'number' =&gt; $this-&gt;faker-&gt;phoneNumber,\n        'is_deleted' =&gt; rand(0,1),\n        'manufacture_id' =&gt; $manufacture-&gt;id\n    ];\n}\n</code></pre> <p>Generate rekod factory di database seeder <code>database\\seeders\\DatabaseSeeder.php</code></p> <pre><code>&lt;?php \nnamespace Database\\Seeders;\n\nuse App\\Models\\Manufacture;\nuse App\\Models\\Phone;\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     *\n     * @return void\n     */\n    public function run()\n    {        \n        // seed table manufactures first\n        $this-&gt;call(ManufactureSeeder::class);\n\n        // seed table user then phone, every user have 10 phone\n        // akan generate 100 rekod phone\n        \\App\\Models\\User::factory(10)\n            -&gt;has(Phone::factory()-&gt;count(10))\n            -&gt;create();        \n    }\n}\n</code></pre> <p>Run menggunakan artisan</p> <pre><code>php artisan db:seed\n</code></pre>"},{"location":"faker/","title":"Faker Library","text":""},{"location":"faker/#faker-library","title":"Faker library","text":"<p>Faker library juga boleh digunakan untuk menjana data dummy yang lebih dinamik. </p> <p>Masukkan code berikut di method <code>run()</code> dalam file seeder     </p> <pre><code>&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Faker\\Factory;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass StockSeeder extends Seeder\n{\n    /**\n    * Run the database seeds.\n    *\n    * @return void\n    */\n    public function run()\n    {            \n        DB::table('stocks')-&gt;truncate();\n\n        $companies = [];\n        $faker = Factory::create();\n\n        foreach (range(1, 1000) as $key){\n            $companies[] = [\n                'name' =&gt; $faker-&gt;name,\n                'address' =&gt; $faker-&gt;address,\n                'website' =&gt; $faker-&gt;domainName,\n                'email' =&gt; $faker-&gt;email,\n                'created_at' =&gt; now(),\n                'updated_at' =&gt; now()\n            ];\n        }\n\n        DB::table('stocks')-&gt;insert($companies);\n    }\n}\n</code></pre> <p>Faker library API https://github.com/fzaninotto/Faker</p>"},{"location":"form_validation/","title":"Input validation","text":""},{"location":"form_validation/#method-controller","title":"Method Controller","text":"<p>Validation rules using method  controller</p> <pre><code>&lt;?php \nprotected function validationRules(){\n    return [\n        'first_name' =&gt; 'required',\n        'last_name' =&gt; 'required',\n        'email' =&gt; 'required | email',\n        'address' =&gt; 'required',\n        'company_id' =&gt; 'required|exists:companies,id'\n    ];\n}\n</code></pre> <p>Call method from <code>save()</code></p> <pre><code>&lt;?php \nprivate function save(Request $request, $id = '')\n{\n    $request-&gt;validate($this-&gt;validationRules());\n    ..\n    ..\n}\n</code></pre>"},{"location":"form_validation/#request-class","title":"Request Class","text":"<p>Validation using extended <code>FormRequest</code></p> <p>Create request object</p> <pre><code>php artisan make:request ModelRequest\n</code></pre> <p>Customize request class</p> <pre><code>&lt;?php \nnamespace App\\Http\\Requests;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Validation\\Rule;\nclass ModelRequest extends FormRequest\n{\n\n    public function authorize()\n    {\n        return true;\n    }\n\n    public function rules()\n    {\n        return [\n            // sample validation\n            'code' =&gt; ['required', Rule::unique('book_types')-&gt;ignore($this-&gt;id)],\n            'name' =&gt; 'required',\n            'price' =&gt; 'required|numeric' \n            // 'name' =&gt; ['required','string','max:255']               \n        ];\n    }\n}\n</code></pre> <p>Customize error message and attribute </p> <pre><code>&lt;?php \n/**\n * Customize attribute name\n */\npublic function attributes()\n{\n    return [            \n        'name' =&gt; 'name',\n        'price' =&gt; 'price'            \n    ];        \n}\n\n/**\n * Customize error message\n */\npublic function messages()\n{\n    return [\n        'required' =&gt; 'The :attribute field can not be blank',\n        'price.numeric' =&gt; 'Masukkan number sahaja',\n        'price.required' =&gt; 'Harga diperlukan ya tn/pn'\n    ];\n}\n</code></pre> <p>Boleh juga call <code>$this-&gt;route('contact')</code> atau <code>$this-&gt;method()</code> dari dalam object request untuk dapatkan information berkaitan request atau object yang akan dikemaskini berdasarkan kepada model binding dekat route.    </p> <p>Tips</p> <p>All available validation rules : https://laravel.com/docs/9.x/validation#available-validation-rules</p>"},{"location":"form_validation/#password-validation-formrequest","title":"Password validation FormRequest","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Validation\\Rules\\Password;\nuse Illuminate\\Validation\\Validator;\n\nclass PasswordChangeRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {        \n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n\n        return [\n            'current_password' =&gt; 'required',        \n            // Using the Password rule object\n            'password' =&gt; [\n                'required',\n                'confirmed',\n                Password::min(8)\n                    -&gt;mixedCase()\n                    -&gt;letters()\n                    -&gt;numbers()\n                    -&gt;symbols()\n                    //-&gt;uncompromised(), // slow verify \n            ]\n        ];\n    }\n\n    public function withValidator(Validator $validator)\n    {\n        $validator-&gt;after(function (Validator $validator) {\n            if (! Hash::check(request()-&gt;get('current_password'), request()-&gt;user()-&gt;password)) {\n                $validator-&gt;errors()-&gt;add('current_password', 'The current password does not match.');\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"guide-backup/","title":"Class Guideline","text":"<pre><code>.\n\u251c\u2500 Day 1 /\n\u2502  \u2514\u2500 Introduction to laravel\n\u2502  \u2514\u2500 Setting up Laravel Development\n\u2502  \u2514\u2500 Getting started with Laravel\n\u2502     \u2514\u2500 Project Structure\n\u2502     \u2514\u2500 Tinker         \n\u2502  \u2514\u2500 Routing\n\u2502     \u2514\u2500 Routing Controller\n\u2502     \u2514\u2500 Passing parameter \n\u2502  \u2514\u2500 Layout Blade\n\u2502  \u2514\u2500 Database Setup     \n\u2502\n\u251c\u2500 Day 2\n\u2502  \u2514\u2500 Database\n\u2502     \u2514\u2500 Migration\n\u2502     \u2514\u2500 Seeder/Faker\n\u2502     \u2514\u2500 Eloquent ORM\n\u2502     \u2514\u2500 Relationship\n\u2502  \u2514\u2500 Routing, Controller, Views\n\u2502     \u2514\u2500 Basic routing\n\u2502     \u2514\u2500 Building views (Blade)\n\u2502     \u2514\u2500 Controller\n\u2502  \u2514\u2500 Rendering Dynamic Data\n\u2502     \u2514\u2500 Pagination, Filtering\n\u2502     \u2514\u2500 Filtering         \n\u2502  \u2514\u2500 Working with Form\n\u2502     \u2514\u2500 Handling Form (BREAD)\n\u2502     \u2514\u2500 Validation\n\u2502     \u2514\u2500 Searching\n\u2502  \u2514\u2500 Layout Blade\n\u2502  \u2514\u2500 Database Setup  \n\u2502\n\u251c\u2500 Day 3\n\u2502  \u2514\u2500 Query Scope      \n\u2502  \u2514\u2500 Authentication\n\u2502     \u2514\u2500 Authentication Scaffolding\n\u2502     \u2514\u2500 Verification    \n\u2502  \u2514\u2500 Protecting Routes\n\u2502  \u2514\u2500 Route Model Bindings\n\u2502\n\u251c\u2500 Day 4\n\u2502  \u2514\u2500 Handling File Upload\n\u2502  \u2514\u2500 Blade Components \n\u2502  \u2514\u2500 Package\n\u2502\n\u2502\n</code></pre>"},{"location":"guide-backup/#day-1","title":"Day 1","text":"<ol> <li>Introduction to laravel</li> <li>Setting up Laravel Development</li> <li>Getting started with Laravel<ol> <li>Project Structure</li> <li>Tinker</li> </ol> </li> <li>Routing <ol> <li>Routing Controller</li> <li>Passing parameter </li> </ol> </li> <li>Layout Blade</li> <li>Database Setup</li> </ol>"},{"location":"guide-backup/#day-2","title":"Day 2","text":"<ol> <li>Database<ol> <li>Migration</li> <li>Seeder/Faker</li> <li>Eloquent ORM</li> <li>Relationship</li> </ol> </li> <li>Routing, Controller, Views<ol> <li>Basic routing</li> <li>Building views (Blade)</li> <li>Controller</li> </ol> </li> <li>Rendering Dynamic Data<ol> <li>Pagination, Filtering</li> </ol> </li> <li>Working with Form<ol> <li>Handling Form (BREAD)</li> <li>Validation</li> <li>Searching</li> </ol> </li> </ol>"},{"location":"guide-backup/#day-3","title":"Day 3","text":"<ol> <li>Query Scope</li> <li>Authentication<ol> <li>Authentication Scaffolding</li> <li>Verification</li> </ol> </li> <li>Protecting Routes</li> <li>Route Model Bindings</li> </ol>"},{"location":"guide-backup/#day-4","title":"Day 4","text":"<ol> <li>Handling File Upload</li> <li>Blade Components</li> <li>Package</li> </ol>"},{"location":"guide/","title":"Class Guideline","text":"<pre><code>.\n\u251c\u2500 Day 1 /\n\u2502  \u2514\u2500 Introduction to laravel\n\u2502  \u2514\u2500 Setting up Laravel Development\n\u2502  \u2514\u2500 Getting started with Laravel\n\u2502     \u2514\u2500 Project Structure\n\u2502     \u2514\u2500 Tinker         \n\u2502  \u2514\u2500 Routing\n\u2502     \u2514\u2500 Routing Controller\n\u2502     \u2514\u2500 Passing parameter \n\u2502  \u2514\u2500 Layout Blade\n\u2502  \u2514\u2500 Database Setup     \n\u2502\n\u251c\u2500 Day 2\n\u2502  \u2514\u2500 Database\n\u2502     \u2514\u2500 Migration\n\u2502     \u2514\u2500 Seeder/Faker\n\u2502     \u2514\u2500 Model                \n\u2502  \u2514\u2500 Routing, Controller, Views\n\u2502     \u2514\u2500 Basic routing\n\u2502     \u2514\u2500 Building views (Blade)\n\u2502     \u2514\u2500 Controller\n\u2502  \u2514\u2500 CRUD - Rendering Dynamic Data\n\u2502     \u2514\u2500 BREAD Scaffolding\n\u2502     \u2514\u2500 Pagination\n\u2502     \u2514\u2500 Validation\n\u2502\n\u251c\u2500 Day 3\n\u2502  \u2514\u2500 Query Scope\n\u2502     \u2514\u2500 Searching\n\u2502     \u2514\u2500 Filtering         \n\u2502     \u2514\u2500 Eloquent ORM\n\u2502     \u2514\u2500 Relationship          \n\u2502  \u2514\u2500 Authentication\n\u2502     \u2514\u2500 Authentication Scaffolding\n\u2502     \u2514\u2500 Verification    \n\u2502  \u2514\u2500 Protecting Routes\n\u2502  \u2514\u2500 Route Model Bindings\n\u2502\n\u251c\u2500 Day 4\n\u2502  \u2514\u2500 Handling File Upload\n\u2502  \u2514\u2500 Mail\n\u2502  \u2514\u2500 PDF\n\u2502  \u2514\u2500 Translation\n\u2502  \u2514\u2500 Package\n\u2502\n\u2502\n</code></pre>"},{"location":"hello-laravel/","title":"Hello Laravel (Route)","text":""},{"location":"hello-laravel/#hello-laravel-first-flight","title":"Hello Laravel - First Flight","text":"<p>Taip code berikut di file <code>routes/web.php</code> untuk dapatkan paparan di browser dan ekses melalui <code>/hello</code></p> <pre><code>&lt;?php\nRoute::get('/hello', function(){\n    return 'Hello laravel';\n});\n</code></pre> <p>Masukkan kod HTML </p> <pre><code>&lt;?php\nRoute::get('/hello', function(){\n    return \"&lt;h1&gt;Hello&lt;/h1&gt;\n        &lt;p&gt;Ini adalah permulaan code&lt;/p&gt;\n    \";\n});\n</code></pre> <p>Mengunakan view</p> <pre><code>&lt;?php\nRoute::get('/hello', function(){\n    return view('hello');\n});\n</code></pre> <p>Passing variable to view</p> <pre><code>&lt;?php\nRoute::get('/hello', function(){\n    return view('hello')-&gt;with('name', 'Siti Nur Farhan');\n});\n</code></pre> <p>Get variable from URI</p> <pre><code>&lt;?php\nRoute::get('/hello/{name}', function($name){    \n    return view('hello', compact('name'));\n});\n</code></pre> <p>Get variable from <code>Request</code> object</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\nRoute::get('/hello/{name}', function(Request $request){    \n    return view('hello')-&gt;with('name', $request-&gt;name);\n});\n</code></pre> <p>Multiple varible passing</p> <pre><code>&lt;?php\nRoute::get('/hello/{name}/{age}', function(Request $request){    \n    return view('hello')-&gt;with('name', $request-&gt;name)-&gt;with('age', $request-&gt;age);\n});\n</code></pre> <p>Passing data using <code>with[]</code> ke view </p> <pre><code>&lt;?php\nRoute::get('/hello/{name}/{age}', function (Request $request) {\n    return view('hello')-&gt;with([\n        'name' =&gt;  $request-&gt;name,\n        'age' =&gt;  $request-&gt;age\n    ]);\n});  \n</code></pre> <p>Optional parameter use <code>?</code></p> <pre><code>&lt;?php\nRoute::get('/hello/{name}/{age?}', function (Request $request) {\n    return view('hello')-&gt;with([\n        'name' =&gt;  $request-&gt;name,\n        'age' =&gt;  $request-&gt;age\n    ]);\n}); \n</code></pre> <p>Route view</p> <pre><code>&lt;?php   \nRoute::view('/hello', 'welcome', ['name' =&gt; 'Ahmad']);\n</code></pre> <p>For more documention about routing https://laravel.com/docs/9.x/routing</p>"},{"location":"helper/","title":"Helpers","text":"<p><code>Helper</code> adalah method/class untuk membantu memudahkan penulisan code seperti <code>request()</code> dan <code>auth()</code>.</p> <ol> <li> <p>Create folder <code>app\\Helpers</code></p> </li> <li> <p>Create file <code>app\\Helpers\\Helpers.php</code> and add code : </p> </li> </ol> <p><pre><code>&lt;?php\nif(!function_exists('getName')){\n    // get name from user model\n    function getName()\n    {\n        return auth()-&gt;user()-&gt;name;\n    }\n}\n</code></pre> 3. Add to `composer.json'</p> <p><pre><code>\"autoload\": {\n    \"psr-4\": {\n        \"App\\\\\": \"app/\",\n        \"Database\\\\Factories\\\\\": \"database/factories/\",\n        \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n    },\n    \"files\": [\n        \"app/helpers/Helpers.php\"\n    ]\n},\n</code></pre> 4. run </p> <pre><code>composer dump-autoload\n</code></pre> <p>Use code in view or controller</p> <pre><code>// view\n{{  getName() }}\n</code></pre>"},{"location":"installation/","title":"Installation Setup","text":""},{"location":"installation/#pre-install","title":"Pre-Install","text":"<p>Check PHP version, pastikan php setup di environment path</p> <pre><code>php -v\n</code></pre> <p>required version  &gt;= 7.2.5</p> <p>Check composer </p> <pre><code>composer -v\n</code></pre> <p>Todo</p> <p>Install composer https://getcomposer.org/</p>"},{"location":"installation/#create-application","title":"Create Application","text":"<p>Create application</p> <pre><code>composer create-project laravel/laravel hello-laravel\n</code></pre> <p>Go to folder</p> <pre><code>cd hello-laravel\n</code></pre>"},{"location":"installation/#running-application","title":"Running application","text":"<p>Laravel comes bundled with a PHP-based web server which can be started by running</p> <pre><code>php artisan serve\n</code></pre> <p>or serve with custom port</p> <pre><code>php artisan serve --port 8484\n</code></pre> <p>Default using <code>localhost</code></p> <pre><code>php artisan serve --host=192.168.0.100 --port=8080\n</code></pre>"},{"location":"local_scopes/","title":"Scope Filter","text":"<p>Scope digunakan dalam model bagi mengurangkan pengulangan code yang sering digunakan</p> <p>Model</p> <pre><code>&lt;?php \npublic functon scopePublished($query){\n    return $query-&gt;where('published_at', '&lt;=', now());\n}\n</code></pre> <p>Controller</p> <pre><code>Post::latestFirst()-&gt;published()-&gt;get();\n</code></pre>"},{"location":"local_scopes/#query-searching","title":"Query Searching","text":"<p>Model</p> <pre><code>&lt;?php \npublic function scopeFilter(\\Illuminate\\Database\\Eloquent\\Builder $query)\n{\n    if($companyId = \\request('company_id')){\n        $query-&gt;where('company_id', $companyId);\n    }\n\n    if($queryText = \\request('query_text')){\n        $query-&gt;where('first_name', 'LIKE', \"%{$queryText}%\");\n    }\n\n    return $query;\n}\n</code></pre> <p>Controller</p> <pre><code>$contacts = Contact::query()-&gt;orderBy('first_name', 'asc')-&gt;filter()-&gt;paginate(8);\n</code></pre>"},{"location":"mail_assignment/","title":"Mail Assignment","text":""},{"location":"mail_assignment/#tugasan","title":"Tugasan","text":"<pre><code>&lt;?php\nRoute::get('/email', function(){\n    Mail::to('akusaiful@gmail.com')-&gt;send(new MailSender([\n        'title' =&gt; 'test',\n        'content' =&gt; 'content'\n    ]));        \n});\n</code></pre> <ol> <li>Gantikan penggunaan <code>route</code> diatas dengan menggunakan controller untuk membuat penghantaran email.</li> <li>Gunakan view file</li> <li>Email dihantar setelah button di tekan </li> <li>Maklumkan status email berjaya dihantar kepada pengguna.</li> </ol>"},{"location":"mail_setup/","title":"Setup","text":""},{"location":"mail_setup/#1-configure-mail","title":"1 - Configure mail","text":"<p>Configuration email berada di dalam fail <code>config/mail.php</code> dengan menggunakan fail <code>.env</code>. Untuk tujuan kelas akan menggunakan konfigurasi berikut :</p> <pre><code>MAIL_MAILER=smtp\nMAIL_HOST=smtp.hostinger.com\nMAIL_PORT=465\nMAIL_USERNAME=training2@danconsult.my\nMAIL_PASSWORD=qwertyuiOP25$$\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=training@danconsult.my\nMAIL_FROM_NAME=\"${APP_NAME}\"\n</code></pre>"},{"location":"mail_setup/#2-create-mail-sender","title":"2 - Create Mail Sender","text":"<pre><code>php artisan make:mail MailSender\n</code></pre> <p>Masukkan public property <code>$data</code> </p> <pre><code>&lt;?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass MailSender extends Mailable\n{\n    use Queueable, SerializesModels;\n\n    public $data;\n\n    /**\n     * Create a new message instance.\n     *\n     * @return void\n     */\n    public function __construct($data)\n    {\n        $this-&gt;data = $data;\n    }\n\n    /**\n     * Build the message.\n     *\n     * @return $this\n     */\n    public function build()\n    {\n        return $this-&gt;view('emails.test');\n    }\n}\n</code></pre>"},{"location":"mail_setup/#3-create-view-fail","title":"3 - Create view fail","text":"<p>Create folder <code>emails</code> dalam <code>resources\\views</code>. Namakan sebagai <code>test.blade.php</code></p> <pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n        &lt;title&gt;Document&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{ $data['title'] }}&lt;/h1&gt;\n        &lt;p&gt;\n            {{ $data['content'] }}\n        &lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"mail_setup/#4-create-route","title":"4 - Create route","text":"<pre><code>&lt;?php\nRoute::get('/email', function(){\n    Mail::to('akusaiful@gmail.com')-&gt;send(new MailSender([\n        'title' =&gt; 'test',\n        'content' =&gt; 'content'\n    ]));        \n});\n</code></pre>"},{"location":"mail_setup/#5-test-send-email","title":"5 - Test Send email","text":"<p>Access ke <code>/email</code> dan email akan dihantar menggunakan template view yang telah dibuat. </p>"},{"location":"manual_reference/","title":"Manual Reference","text":""},{"location":"manual_reference/#laravel","title":"Laravel","text":"<ol> <li>https://github.com/laravel/fortify</li> <li>https://laragon.org/</li> <li>https://jetstream.laravel.com/2.x/introduction.html</li> <li>https://dev.to/ericchapman/my-beloved-laravel-cheat-sheet-3l73</li> <li>https://xqsit.github.io/laravel-coding-guidelines/docs/use-standard-laravel-tools/</li> </ol>"},{"location":"manual_reference/#mkdocs","title":"Mkdocs","text":"<ol> <li>https://squidfunk.github.io/mkdocs-material/</li> </ol>"},{"location":"manual_reference/#form-validation-flow","title":"Form validation flow","text":"<ol> <li>https://learn2torials.com/a/laravel8-form-validation</li> </ol>"},{"location":"manual_reference/#customize-validation-error-messages","title":"Customize validation error messages","text":"<ol> <li>How to customize or Change validation error messages</li> </ol>"},{"location":"markdown/","title":"Markdown","text":"<p>Phasellus posuere in sem ut cursus</p> <p>https://yakworks.github.io/docmark/extensions/admonition/ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Todo</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li>Github Emoji Picker : https://github-emoji-picker.vercel.app/</li> </ol>"},{"location":"me/","title":"Me","text":"<pre><code>&lt;?php\n$profile = [\n    'Name' =&gt; 'Mohd Shaiful Nizam',\n    'Mobile' =&gt; '+6012-7294912',\n    'Email' =&gt; 'akushaiful@gmail.com'\n];\n</code></pre>"},{"location":"model/","title":"Understanding Model : Eloquent","text":""},{"location":"model/#create-model","title":"Create Model","text":"<p>Create table model, use naming convetion camel case</p> <pre><code>php artisan make:model &lt;ModelName&gt;\n</code></pre> <p>Create table model with migration table</p> <pre><code>php artisan make:model &lt;Model&gt; -m\n</code></pre> <p>Basic Eloquent model yang dijana : </p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Stock extends Model\n{\n    use HasFactory;\n}\n</code></pre> <p>Tips</p> <p><code>php artisan make:model Note -a</code></p> <p><code>-a</code> : to create model, migration, resource controller and factory  </p> <p>`php artisan make:model Note -mcrf </p> <p><code>-mcr</code> : to create model, controller, resource controller and factory</p>"},{"location":"model/#key-concepts","title":"Key Concepts","text":""},{"location":"model/#tablename","title":"tableName","text":"<pre><code>protected $tableName = 'Your table name';\n</code></pre>"},{"location":"model/#primarykey","title":"primaryKey","text":"<pre><code>protected $primaryKey = \"Column_Name_Primary_Key\";\n</code></pre>"},{"location":"model/#incrementing","title":"incrementing","text":"<p>Primary ID not incrementing set to false;</p> <pre><code>public $incrementing = false;\n</code></pre>"},{"location":"model/#fillable","title":"fillable","text":"<pre><code>protected $fillable = ['your', 'massize', 'assign', 'attribute', 'list'];\n</code></pre>"},{"location":"model/#timestamps","title":"timestamps","text":"<p>Jika table tidak memmpunya attribute <code>created_at, updated_at</code></p> <pre><code>protected $timestamps = false;\n</code></pre>"},{"location":"model/#guarded","title":"guarded","text":"<pre><code>proctedted $guarded = [];\n</code></pre>"},{"location":"model/#with","title":"with()","text":"<p><code>with</code> - load automatically with eager loading when calling object</p> <pre><code>protected $with = ['contacts', 'companies'];\n</code></pre>"},{"location":"model/#withcount","title":"withCount()","text":"<p>Controller</p> <pre><code>$company = Company::withCount('contacts')-&gt;paginate(10);\n</code></pre> <p>View</p> <pre><code>@foreach($company as $item){\n    {{ $item-&gt;contacts_count }}    \n@endforeach\n</code></pre> <p>More examples of withCount() method - in the official Laravel documentation</p> <p>https://laravel.com/docs/master/eloquent-relationships#counting-related-models </p>"},{"location":"model/#hello-model","title":"Hello Model","text":"<p>Execute tinker</p> <pre><code>php artisan tinker\n</code></pre> <p>Load model</p> <pre><code>namespace App\\Models\n</code></pre> <p>Get all data</p> <pre><code>Model::all()\n</code></pre> <p>for more query Eloquent </p>"},{"location":"package/","title":"Package","text":""},{"location":"package/#laravel-package","title":"Laravel Package","text":"<ol> <li>https://github.com/spatie/laravel-permission</li> <li>https://github.com/Zizaco/entrust</li> <li>https://github.com/jrean/laravel-user-verification</li> <li>https://github.com/laravelcollective/annotations</li> <li>https://github.com/yajra/laravel-datatables</li> <li>https://intervention.io (Image manipulation)</li> <li>https://github.com/InfyOmLabs/laravel-generator</li> <li>https://github.com/makeabledk/laravel-factory-enhanced</li> <li>https://spatie.be/</li> <li>https://github.com/spatie/laravel-web-tinker</li> <li>https://laravelcollective.com</li> <li>https://laravelactions.com/</li> <li>https://laravel-livewire.com/docs/2.x/installation</li> <li>https://laravelviews.com/</li> <li>https://yajrabox.com/</li> <li>https://github.com/imanghafoori1/laravel-heyman</li> <li>https://github.com/blade-ui-kit/blade-icons</li> </ol>"},{"location":"package/#best-laravel-package","title":"Best laravel package","text":"<pre><code>https://github.com/LaravelDaily/Best-Laravel-Packages\n</code></pre>"},{"location":"package/#pogination-fast-pagination","title":"Pogination (Fast pagination)","text":"<pre><code>https://github.com/hammerstonedev/fast-paginate\n</code></pre>"},{"location":"package/#extension-for-vscode","title":"Extension for vscode","text":"<pre><code>https://themeselection.com/vs-code-laravel-extensions/\n</code></pre>"},{"location":"package/#composer","title":"Composer","text":"<pre><code>https://packagist.org/\n</code></pre>"},{"location":"package/#laravel-extender-controller","title":"Laravel extender controller","text":"<pre><code>https://github.com/timwassenburg/laravel-improved-resource-controllers\n</code></pre>"},{"location":"package/#laravel-grid-view","title":"Laravel Grid View","text":"<pre><code>https://github.com/itstructure/laravel-grid-view\n</code></pre>"},{"location":"package/#filter-input","title":"Filter Input","text":"<pre><code>https://github.com/Waavi/Sanitizer\n</code></pre>"},{"location":"package_action/","title":"Action","text":"<p>A classes that take care of one specific task. (SOLID)</p> <p>Package documentation <code>https://laravelactions.com</code></p> <p>Install package </p>"},{"location":"package_debugbar/","title":"Debugbar","text":"<p>Install</p> <pre><code>composer require barryvdh/laravel-debugbar --dev\n</code></pre> <p>Open file <code>.env</code> and set <code>APP_DEBUG</code> to <code>true</code>.</p> <pre><code>APP_DEBUG=true\n</code></pre> <p>Reference</p> <p>https://github.com/barryvdh/laravel-debugbar</p>"},{"location":"package_debugbar/#optional-install-laravel-ide-helper","title":"(Optional) Install laravel-ide-helper","text":"<p>Install using composer</p> <pre><code>composer require --dev barryvdh/laravel-ide-helper --dev\n</code></pre> <p>Add this conditional statement in your <code>AppServiceProvider</code> to register the helper class.</p> <pre><code>public function register()\n{\n    if ($this-&gt;app-&gt;environment() !== 'production') {\n        $this-&gt;app-&gt;register(\\Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class);\n    }\n    // ...\n}\n</code></pre> <p>Generate a file to help the IDE understand Facades. You will need to restart Visual Studio Code.</p> <pre><code>php artisan ide-helper:generate\n</code></pre>"},{"location":"package_debugbar/#optional-laravel-query-detector-n1","title":"(Optional) Laravel Query Detector N+1","text":"<p>Install package <code>https://github.com/beyondcode/laravel-query-detector</code> </p> <pre><code>composer require beyondcode/laravel-query-detector --dev\n</code></pre> <p>Customize query detector to use debugbar as default alert. </p> <p>Publish package : </p> <pre><code>php artisan vendor:publish --provider=\"BeyondCode\\QueryDetector\\QueryDetectorServiceProvider\"\n\n// atau - then select Querydetector\nphp artisan vendor:publish\n</code></pre> <p>open <code>config/querydetector.php</code>. Change output to : </p> <pre><code>'output' =&gt; [\n    \\BeyondCode\\QueryDetector\\Outputs\\Debugbar::class\n    // \\BeyondCode\\QueryDetector\\Outputs\\Alert::class,\n    // \\BeyondCode\\QueryDetector\\Outputs\\Log::class,\n]\n</code></pre> <p></p>"},{"location":"package_extender_controller/","title":"Extender Controller","text":"<p>Package repository <code>https://github.com/timwassenburg/laravel-improved-resource-controllers</code></p> <p>Install package</p> <pre><code>composer require timwassenburg/laravel-improved-resource-controllers\n</code></pre> <p>Publish package (Optional)</p> <pre><code>php artisan vendor:publish --provider=\"TimWassenburg\\ImprovedResourceControllers\\ImprovedResourceControllersServiceProvider\" --tag=\"config\"\n</code></pre> <p>Usage</p> <pre><code>php artisan make:controller CustomerController --resource\n</code></pre> <p>Read more documentation at github https://github.com/timwassenburg/laravel-improved-resource-controllers</p>"},{"location":"package_grid/","title":"Grid","text":"<p>Grid repository</p> <pre><code>https://github.com/itstructure/laravel-grid-view\n</code></pre> <p>Info</p> <p>For more info https://github.com/itstructure/laravel-grid-view</p> <p>Install menggunakan composer</p> <pre><code>composer require itstructure/laravel-grid-view \"~1.0.11\"\n</code></pre> <p>Register service provider in config/app.php</p> <pre><code>Itstructure\\GridView\\GridViewServiceProvider::class,\n</code></pre> <p>Pindahkan asset ke layouts/views/vendor bagi membolehkan modification dibuat ke atas grid</p> <pre><code>php artisan grid_view:publish --only=views\n</code></pre> <p>Paparan views/contract/index</p> <pre><code>&lt;?php\n    @php\n    $gridData = [\n        'dataProvider' =&gt; $dataProvider,\n        'title' =&gt; 'Panel title',\n        'useFilters' =&gt; false,\n        'columnFields' =&gt; [\n            'id',\n            'active',\n            'icon',\n            'created_at'\n        ]\n    ];\n    @endphp\n\n    @gridView($gridData)\n</code></pre> <p>Untuk menggunakan action button</p> <pre><code>&lt;?php \n@gridView([\n'dataProvider' =&gt; $dataProvider,\n'columnFields' =&gt; [\n    [\n        'label' =&gt; 'Actions', // Optional\n        'class' =&gt; Itstructure\\GridView\\Columns\\ActionColumn::class, // Required\n        'actionTypes' =&gt; [ // Required\n            'view',\n            'edit' =&gt; function ($data) {\n                return '/admin/pages/' . $data-&gt;id . '/edit';\n            },\n            [\n                    'class' =&gt; Itstructure\\GridView\\Actions\\Delete::class, // Required\n                    'url' =&gt; function ($data) {\n                        // Optional\n                        return route('profile.destroy', $data);\n                        //return '/profile/' . $data-&gt;id . '/delete';\n                    },\n                    'htmlAttributes' =&gt; [\n                        // Optional\n                        // 'target' =&gt; '_blank',\n                        //'onclick' =&gt; 'confirmGridDelete()',\n                        'class' =&gt; 'btn btn-danger btn-delete'\n                        // 'style' =&gt; 'color: yellow; font-size: 16px;',\n                        // 'onclick' =&gt; 'return window.confirm(\"Are you sure you want to delete?\");',\n                    ],\n                ],\n        ]\n    ]\n]\n])\n</code></pre> <p>Modified <code>views/vendor/grid_view/actions/delete.blade.php</code> (remove <code>class</code> dekat <code>&lt;a&gt;</code> sahaja)</p> <pre><code>&lt;?php\n&lt;div class=\"col-lg-{!! $bootstrapColWidth !!}\"&gt;\n&lt;a href=\"{!! $url !!}\" @if(!empty($htmlAttributes)) {!! $htmlAttributes !!} @endif &gt;\n    &lt;svg width=\"1.2em\" height=\"1.5em\" viewBox=\"0 0 16 16\" class=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n        &lt;path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/&gt;\n        &lt;path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/&gt;\n    &lt;/svg&gt;\n&lt;/a&gt;&amp;nbsp\n&lt;/div&gt;\n&lt;div class=\"d-lg-none\"&gt;&amp;nbsp&lt;/div&gt;\n</code></pre> <p>Masukkan hidden <code>form</code> dan <code>querySelectorAll</code> di <code>views/vendor/grid_view/grid.blade.php</code>. Letak sebelum tag <code>&lt;script&gt;</code></p> <pre><code>&lt;?php\n    ...\n\n    &lt;form style=\"display: none\" id=\"form-delete\" method=\"POST\"&gt;\n    @csrf\n    @method('DELETE')\n    &lt;/form&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            $('#grid_view_checkbox_main').click(function(event) {\n                $('input[role=\"grid-view-checkbox-item\"]').prop('checked', event.target.checked);\n            });\n\n            $('#grid_view_search_button').click(function() {\n                $('#grid_view_filters_form').submit();\n            });\n\n            $('#grid_view_reset_button').click(function() {\n                $('input[role=\"grid-view-filter-item\"]').val('');\n                $('select[role=\"grid-view-filter-item\"]').prop('selectedIndex', 0);\n            });\n        });\n\n        document.querySelectorAll('.btn-delete').forEach((button) =&gt; {\n            button.addEventListener('click', function(event) {\n                event.preventDefault();\n                if (confirm('Delete?')) {\n                    let action = this.getAttribute('href');\n                    let form = document.getElementById('form-delete');\n                    form.setAttribute('action', action);\n                    form.submit();\n                }           \n            });\n        });\n    &lt;/script&gt;\n</code></pre> <p>Add <code>routes/web.php</code> </p> <pre><code>Route::delete('/profile/{id}/delete', [ProfileController::class, 'destroy'])-&gt;name('profile.destroy');\n</code></pre> <p>Tukar script js jika menggunakn sweetalert seperti berikut : </p> <pre><code>&lt;?php\n    &lt;form style=\"display: none\" id=\"form-delete\" method=\"POST\"&gt;\n    @csrf\n    @method('DELETE')\n    &lt;/form&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            $('#grid_view_checkbox_main').click(function(event) {\n                $('input[role=\"grid-view-checkbox-item\"]').prop('checked', event.target.checked);\n            });\n\n            $('#grid_view_search_button').click(function() {\n                $('#grid_view_filters_form').submit();\n            });\n\n            $('#grid_view_reset_button').click(function() {\n                $('input[role=\"grid-view-filter-item\"]').val('');\n                $('select[role=\"grid-view-filter-item\"]').prop('selectedIndex', 0);\n            });\n        });\n\n        document.querySelectorAll('.btn-delete').forEach((button) =&gt; {\n            button.addEventListener('click', function(event) {\n                event.preventDefault();\n                Swal.fire({\n                    title: 'Are you sure?',\n                    icon: 'warning',\n                    text: \"You won't be able to revert this!\",\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes, delete it!'\n                }).then((result) =&gt; {\n                    if (result.value) {\n                        let action = this.getAttribute('href');\n                        let form = document.getElementById('form-delete');\n                        form.setAttribute('action', action);\n                        form.submit();\n                    }\n                });\n            });\n        });\n    &lt;/script&gt;\n</code></pre>"},{"location":"package_install/","title":"Package for new installation","text":"<p>Package ini boleh digunakan untuk dipasang/configure pada laravel yang baru create.</p> <ol> <li>https://realrashid.github.io/sweet-alert/</li> <li>https://github.com/itstructure/laravel-grid-view</li> <li>https://github.com/timwassenburg/laravel-improved-resource-controllers</li> <li>https://github.com/hammerstonedev/fast-paginate</li> </ol>"},{"location":"package_power_join/","title":"Package Power JOIN","text":"<p>https://github.com/kirschbaum-development/eloquent-power-joins</p>"},{"location":"package_sweetalert/","title":"Sweetalert","text":"<p>Package repository <code>https://realrashid.github.io/sweet-alert/</code></p> <p>Install package</p> <pre><code>composer require realrashid/sweet-alert\n</code></pre> <p>Masukkan dekat master <code>layout/main.blade.php</code> sebelum tag <code>&lt;/body&gt;</code></p> <pre><code>@include('sweetalert::alert')\n</code></pre> <p>Publish alert to <code>views/vendor</code></p> <pre><code>php artisan sweetalert:publish\n</code></pre> <p>Masukkan ke <code>.env</code> </p> <pre><code>SWEET_ALERT_AUTO_DISPLAY_ERROR_MESSAGES=true\nSWEET_ALERT_ALWAYS_LOAD_JS=true\n</code></pre> <p>Info</p> <p>For more info sweetalert https://sweetalert2.github.io/</p>"},{"location":"package_sweetalert/#package-sweetalert-combine-with-livewire","title":"Package sweetAlert combine with livewire","text":"<p>https://github.com/jantinnerezo/livewire-alert</p>"},{"location":"package_webtinker/","title":"Web Tinker","text":"<p>Package Repository <code>https://github.com/spatie/laravel-web-tinker</code></p> <p>Install package</p> <pre><code>composer require spatie/laravel-web-tinker --dev\n</code></pre> <p>Publish assets</p> <pre><code>php artisan web-tinker:install\n</code></pre> <p>Publish config file (optional)</p> <pre><code>php artisan vendor:publish --provider=\"Spatie\\WebTinker\\WebTinkerServiceProvider\" --tag=\"config\"\n</code></pre> <p>Visit <code>/tinker</code> in your local environment of your app to view the tinker page.</p>"},{"location":"pagination/","title":"Pagination","text":""},{"location":"pagination/#pagination","title":"Pagination","text":"<p>Add <code>apps\\Provider\\AppServiceProvider\\</code> </p> <pre><code>&lt;?php \npublic function boot()\n{        \n    Paginator::useBootstrap();\n}\n</code></pre> <p>Publish paginator to views</p> <pre><code>php artisan vendor:publish\n</code></pre> <p>Selepas run <code>vendor:publish</code>, code tambahan akan dimasukkan di <code>resources\\views\\vendor\\</code>  membolehkan customization dibuat keatas code pagination yang digunakan oleh laravel</p> <p>Controller </p> <pre><code>&lt;?php\n public function index()\n{\n   // call paginate from controller\n    $model = BookType::paginate(8);\n    return view('state.index')-&gt;with('model', $model);\n}\n</code></pre> <p>View - Loop data in view</p> <pre><code>@foreach($model as $type)                                            \n    {{ $type-&gt;id }}\n@endforeach\n\n// Generate pagination page\n{{ $model-&gt;links() }}\n</code></pre>"},{"location":"pdf/","title":"Generate PDF","text":""},{"location":"pdf/#1-install-dompdf-package","title":"1 - Install DOMPDF Package","text":"<pre><code>composer require barryvdh/laravel-dompdf\n</code></pre>"},{"location":"pdf/#2-modified-configappphp","title":"2 - Modified <code>config/app.php</code>","text":"<pre><code>&lt;?php \n'providers' =&gt; [\n    ....\n    Barryvdh\\DomPDF\\ServiceProvider::class,\n],\n\n'aliases' =&gt; [\n    ....\n    'PDF' =&gt; Barryvdh\\DomPDF\\Facade::class,\n]\n</code></pre>"},{"location":"pdf/#3-add-route","title":"3 - Add route","text":"<pre><code>Route::get('/manufacture/pdf', [ManufactureController::class, 'createPdf']);\n</code></pre>"},{"location":"pdf/#4-add-controller-method","title":"4 - Add Controller method","text":"<pre><code>&lt;?php \npublic function createPdf()\n{\n    $manufacture = Manufacture::find(1);\n    return Pdf::loadView('manufacture.pdf_manufacture_data', ['name' =&gt; 'Nama Manufacture'])\n    -&gt;setPaper('A4', 'landscape')\n    -&gt;stream('data.pdf');\n    // return $pdf-&gt;download('data.pdf');\n\n}\n</code></pre>"},{"location":"pdf/#5-blade-create-view-file","title":"5 - Blade - Create view file","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        body{font-family: Arial, Helvetica, sans-serif;font-size: 12px}\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table class=\"table\"&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Name&lt;/td&gt;\n            &lt;td&gt;{{ $name }}&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Address&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Logo&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n        &lt;/tr&gt;   \n    &lt;/table&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"pdf/#api-reference","title":"API Reference","text":"<p>https://github.com/barryvdh/laravel-dompdf</p>"},{"location":"reading/","title":"Reading","text":""},{"location":"reading/#good-reading","title":"Good Reading","text":"<ol> <li>https://devdojo.com/tnylea/the-benefits-of-blade-view-components</li> </ol>"},{"location":"refresh_browser/","title":"Auto Refresh Browser","text":"<p>Add to <code>webpack.mix.js</code> at the end </p> <pre><code>mix.browserSync('127.0.0.1:8000');\n</code></pre> <p>run at terminal type: </p> <pre><code>npm run watch\n</code></pre> <p>Make sure VSC set to auto save</p>"},{"location":"relationship/","title":"Relationship","text":""},{"location":"relationship/#user","title":"User","text":"<pre><code>&lt;?php\n/**\n * 1 to Many\n */\npublic function phones()\n{\n    return $this-&gt;hasMany(Phone::class);\n}\n\n/**\n * Many to Many\n */\npublic function manufactures()\n{\n    return $this-&gt;belongsToMany(Manufacture::class, 'phones')-&gt;distinct();\n}\n</code></pre>"},{"location":"relationship/#phone","title":"Phone","text":"<pre><code>&lt;?php\n/**\n * 1 to Many (Inverse)\n */\n public function manufacture()\n{\n    return $this-&gt;belongsTo(Manufacture::class);\n}\n</code></pre>"},{"location":"relationship/#manufacture","title":"Manufacture","text":"<pre><code>&lt;?php\n/**\n *  1 to Many\n */\npublic function phones()\n{\n    return $this-&gt;hasMany(Phone::class);\n}\n\n/**\n * Many to Many\n */\npublic function users()\n{\n    return $this-&gt;belongsToMany(User::class, 'phones');\n}\n</code></pre>"},{"location":"relationship/#query","title":"Query","text":""},{"location":"relationship/#user-query-multiple-implementation","title":"User Query (Multiple implementation)","text":"<ol> <li> <p>Dapatkan pengguna dengan jumlah phone yang dimilik </p> <pre><code>User::withCount('phones')-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan senarai phone yang dimilik dan pengeluar yang terlibat dengan penggunaan phone oleh pengguna</p> <pre><code> User::with('phones', 'manufactures')-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan pengguna beserta bilangan phone yang dimilik dan bilangan manufacture, dan senarai phone yang dimiliki untuk rekod pertama dalam db. Gantikan <code>first()</code> kepada <code>get()</code> untuk mendapatkan keseluruhan rekod.</p> <pre><code>User::withCount([\n    'phones',\n    'manufactures' =&gt; function($query){\n        $query-&gt;select(DB::raw('count(distinct manufacture_id)'));\n    }])\n-&gt;with('phones')\n-&gt;first()\n</code></pre> </li> <li> <p>Pengguna yang mempunyai lebih dari satu phone</p> <pre><code>User::has('phones', '&gt;', 1)-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan senarai pengguna yang mempunya lebih dari 5 phone beserta bilangan phone dan senarai phone</p> <pre><code>User::has('phones', '&gt;', 5)-&gt;withCount('phones')-&gt;with('phones')-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan senarai pengguna yang menggunakan phone dengan nama 'Apple'</p> <pre><code>User::with(['phones' =&gt; function($query){$query-&gt;where('name', 'like', '%Apple%');}])-&gt;get()\n</code></pre> </li> <li> <p>Dapakatn senarai pengguna yang mengguna phone dengan nama 'Apple' dan senarai phone tersebut</p> <pre><code>&lt;?php\nUser::with([\n    'phones' =&gt;function($query){\n        $query-&gt;where('name', 'like', '%Apple%');\n    }])\n-&gt;whereHas('phones',function($query){\n    $query-&gt;where('name', 'like', '%Apple%');\n})-&gt;get()\n</code></pre> <p>Eloquent query diatas boleh diganti menggunakan local scope untuk menjadikan code lebih clean</p> <pre><code>&lt;?php \npublic function scopeWithWhereHas($query, $relation, $constraint){\n    return $query-&gt;whereHas($relation, $constraint)-&gt;with([$relation =&gt; $constraint]);\n}\n\n// panggilan \nUser::withWhereHas('phones', fn($query) =&gt; $query-&gt;where('name', 'like', '%Apple%'))-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan senarai pengguna yang menggunakan phone dari pengeluar 'Apple'</p> <pre><code>User::whereHas('manufactures', function($query){$query-&gt;where('manufactures.name', 'like', '%Apple%' );})-&gt;get()\n</code></pre> </li> <li> <p>Dapatkan senarai pengguna yang menggunakan phone dari pengeluar 'Apple' dan senarai phone (belum finalize)</p> <pre><code>&lt;?php\nUser::select('users.name', 'phones.name as phone_name')\n    -&gt;join('phones', 'users.id', '=', 'user_id')\n    -&gt;join('manufactures', 'phones.manufacture_id', '=', 'manufactures.id')\n    -&gt;where('manufactures.name','like', '%Apple%')\n    -&gt;distinct()\n    -&gt;take(5)\n    -&gt;get();   \n</code></pre> </li> </ol>"},{"location":"remove_public/","title":"Remove Public","text":"<p>Rename <code>server.php</code> to <code>index.php</code></p> <p>Copy <code>public/.htaccess</code> to root and paste below code</p> <pre><code>Options -MultiViews -Indexes\nRewriteEngine On\n# Handle Authorization Header\nRewriteCond %{HTTP:Authorization} .\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n# Redirect Trailing Slashes If Not A Folder...\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_URI} (.+)/$\nRewriteRule ^ %1 [L,R=301]\n# Handle Front Controller...\nRewriteCond %{REQUEST_URI} !(\\.css|\\.js|\\.png|\\.jpg|\\.gif|robots\\.txt)$ [NC]\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [L]\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_URI} !^/public/\nRewriteRule ^(css|js|img)/(.*)$ public/$1/$2 [L,NC]\n</code></pre> <p>Note : all css to image background mesti menggunakan path seperti berikut : </p> <pre><code>#top {    \n    background: url('../img/background3.jpg') no-repeat center;    \n}\n</code></pre> <p>Reference</p> <p>https://medium.com/@laraveltuts/laravel-9-remove-public-from-url-using-htaccess-527f22961556</p>"},{"location":"route_link/","title":"Routing","text":""},{"location":"route_link/#basic","title":"Basic","text":"<pre><code>&lt;a\n  href=\"{{ route('company.index') }}\"\n  title=\"Theme Modes (beta)\"\n  data-filter-tags=\"theme settings theme modes (beta)\"\n&gt;\n  &lt;span class=\"nav-link-text\" data-i18n=\"nav.theme_settings_theme_modes_(beta)\"\n    &gt;Senarai Syarikat&lt;/span\n  &gt;\n&lt;/a&gt;\n</code></pre> <p>Example using x-component</p> <pre><code>&lt;x-nav-link\n  href=\"{{ route('counter') }}\"\n  :active=\"request()-&gt;routeIs('counter')\"\n&gt;\n  {{ __('Counter') }}\n&lt;/x-nav-link&gt;\n</code></pre>"},{"location":"route_routing/","title":"Routing","text":""},{"location":"route_routing/#basic","title":"Basic","text":"<p>Verb route </p> <pre><code>&lt;?php\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n</code></pre> <p>Response to multiple verb</p> <pre><code>&lt;?php\nRoute::match(['get', 'post'], '/', function () {\n    //\n});\n</code></pre> <p>Response to any verb</p> <pre><code>&lt;?php\nRoute::any('/', function () {\n    //\n});\n</code></pre> <p>Return string </p> <pre><code>&lt;?php\nRoute::get('contacts', function (){\n    return \"&lt;h1&gt;All Contacts&lt;/h1&gt;\";\n});    \n</code></pre> <p>Routing with <code>view()</code> </p> <pre><code>&lt;?php\nRoute::get('/', function () {\n    return view('welcome');\n});\n</code></pre> <p>Named routes</p> <pre><code>&lt;?php\nRoute::get('/', function () {\n    return view('welcome');\n})-&gt;name('contacts.index);\n</code></pre> <p>Return data menggunakan model</p> <pre><code>&lt;?php\nRoute::get('/contacts/{id}', function($id) {\n    return \\App\\Models\\Contact::find($id);\n});\n</code></pre>"},{"location":"route_routing/#route-using-controller-class","title":"Route using controller class","text":"<p>Index</p> <pre><code>&lt;?php \nRoute::get('contacts', \n[\\App\\Http\\Controllers\\ContactController::class, 'index'])\n-&gt;name('contacts.index');\n</code></pre> <p>Create </p> <pre><code>&lt;?php \nRoute::get('/contacts/create', \n[\\App\\Http\\Controllers\\ContactController::class, 'create'])\n-&gt;name('contacts.create');\n</code></pre> <p>View ID</p> <pre><code>&lt;?php     \nRoute::get('/contacts/{id}', \n[\\App\\Http\\Controllers\\ContactController::class, 'view'])\n-&gt;name('contacts.view';\n</code></pre>"},{"location":"route_routing/#implicit-route-model-binding","title":"Implicit - Route model binding","text":"<pre><code>&lt;?php \n// http://localhost.com/manufacture/24\nRoute::get('manufacture/{id}', function ($id) {\n  $manufacture = Manufacature::find($id);\n  if (!$post) return abort(404);  \n  return view('manufacture.show', compact('manufacture'));\n});\n</code></pre> <pre><code>&lt;?php \nRoute::get('manufacture/{id}', function ($id) {\n  $manufacture = Manufacture::findOrFail($id);\n  return view('manufacture.show', compact('manufacture'));\n});\n</code></pre> <p>Dengan menggunakan route model binding, code diatas boleh ditulis seperti berikut : </p> <pre><code>&lt;?php\n\nRoute::get('manufacture/{manufacture}', function (Manufacture $manufacture) {\n  return view('manufacture.show', compact('manufacture'));\n});\n</code></pre> <p>Change following method </p> <pre><code>&lt;?php\npublic function view($id)\n{\n    $contact = \\App\\Models\\Contact::findOrFail($id);\n    return view('contacts.view', compact('contact'));\n}\n</code></pre> <p>to </p> <pre><code>&lt;?php\npublic function view(Contact $contact)\n{\n    return view('contacts.view', compact('contact'));\n}\n</code></pre> <p>Change route <code>web.php</code></p> <pre><code>&lt;?php\nRoute::get('/contacts/{id}', [\\App\\Http\\Controllers\\ContactController::class, 'view'])-&gt;name('contacts.view');\n</code></pre> <p>to </p> <pre><code>&lt;?php\nRoute::get('/contacts/{contact}', [\\App\\Http\\Controllers\\ContactController::class, 'view'])-&gt;name('contacts.view');\n</code></pre>"},{"location":"route_routing/#explicit-route-model-binding","title":"Explicit - Route Model Binding","text":"<p>Update file <code>app\\Providers\\RouteServiceProvider.php</code>. Dengan memasukkan injector model kita tidak perlu lagi define model yang akan digunakan dibahagian controller method parameter. </p> <pre><code>&lt;?php\npublic function boot()\n{\n    $this-&gt;configureRateLimiting();\n\n    $this-&gt;routes(function () {\n        Route::prefix('api')\n            -&gt;middleware('api')\n            -&gt;namespace($this-&gt;namespace)\n            -&gt;group(base_path('routes/api.php'));\n\n        Route::middleware('web')\n            -&gt;namespace($this-&gt;namespace)\n            -&gt;group(base_path('routes/web.php'));\n    });\n\n    // route model binding\n    Route::model('contact', Contact::class);\n\n    // route model binding with customization query\n    Route::bind('contact', function($value){\n        return Contact::where('first_name', $value)-&gt;firstOrFail();\n    });\n}\n</code></pre> <p>Route akan ditulis seperti berikut : </p> <pre><code>&lt;?php\nRoute::get('/calc/{model}', function(Request $request, $model){\n    $number = empty($request-&gt;number)? 2 : $request-&gt;number;\n    return view('home.calc')-&gt;with('number', $number)-&gt;with('phone', $model);\n});\n</code></pre> <p>Controller method boleh ditulis seperti berikut:</p> <pre><code>&lt;?php\npublic function view($contact)\n{\n    return view('contacts.view', compact('contact'));\n}\n</code></pre> <p>Panggilan ke atas properties untuk object <code>contact</code> boleh dibuat seperti biasa seperti berikut <code>$contact-&gt;name</code> sebagai contoh.</p>"},{"location":"route_routing/#customize-key-id-bagi-route-yang-menggunakan-teknik-model-binding","title":"Customize key ID bagi route yang menggunakan teknik model binding","text":"<p>Sekiranya implicit model yang dibuat tidak merujuk column <code>id</code> sebagai referece key perlulah dibuat perubahan kepada model terlebih dahulu. Rujukan column <code>id</code> yang dibaca oleh model boleh ditukarkan kepada column lain untuk melaksanakan query seperti column <code>email</code> atau <code>nric</code>. Terdapat 2 kaedah yang boleh digunakan.</p>"},{"location":"route_routing/#option-1","title":"Option 1","text":"<p>Override method <code>getRouteKey()</code> dalam model <code>Contact.php</code></p> <pre><code>&lt;?php\npublic function getRouteKeyName()\n{        \n    // rujukan kepada column yg akan digunakan oleh query\n    return 'first_name';\n}\n</code></pre>"},{"location":"route_routing/#option-2","title":"Option 2","text":"<p>Guna route <code>web.php</code> (laravel 7+)</p> <pre><code>&lt;?php\nRoute::get('/contacts/{contact:first_name}', [\\App\\Http\\Controllers\\ContactController::class, 'view'])-&gt;name('contacts.view');\n</code></pre> <p>Tips</p> <p>Untuk Troubleshoot route, anda boleh menggunakan function <code>dd()</code> : </p> <pre><code>Route::get('/contacts/{contact:first_name}', function (\\App\\Models\\Contact $contact){\n    dd($contact);\n});\n</code></pre>"},{"location":"route_routing/#resource-route","title":"Resource Route","text":"<p>Untuk method yang sama dalam controller bagi tugasan CRUD boleh menggunakan <code>Route::resource()</code> yang lebih mudah. Dengan kaedah ini, tidak perlu lagi define setiap route yang diperlukan. </p> <pre><code>Route::resource('contacts', \\App\\Http\\Controllers\\ContactController::class);\n</code></pre> <p>route definintion method mestilah sama dengan yang disenaraikan oleh <code>php artisan route:list --name=contacts</code>. </p> <p>atau boleh ditulis seperti berikut menggunakan <code>[]</code> :</p> <pre><code>&lt;?php\nRoute::resources([\n    'contacts' =&gt; \\App\\Http\\Controllers\\ContactController::class,\n    'companies' =&gt; \\App\\Http\\Controllers\\CompanyController::class\n]);  \n</code></pre>"},{"location":"route_routing/#partial-resource-route","title":"Partial Resource Route","text":"<p>Expose sebahagian resource menggunakan method <code>only()</code> : </p> <pre><code>Route::resource('contacts', \\App\\Http\\Controllers\\ContactController::class)-&gt;only(['index', 'create']);\n</code></pre> <p>Expose semua resource kecuali menggunakan method <code>except()</code></p> <pre><code>Route::resource('contacts', \\App\\Http\\Controllers\\ContactController::class)-&gt;except(['index', 'create']);\n</code></pre>"},{"location":"route_routing/#nested-resources","title":"Nested resources","text":"<p>Children of onother resource, route untuk capture one to many relationship. </p> <pre><code>Route::resource('/companies.contacts', ContactController::class);\n</code></pre>"},{"location":"route_routing/#naming-resource-route","title":"Naming Resource Route","text":"<pre><code>Route::resource('/contacts', ContactController::class)-&gt;names([\n    'index' =&gt; 'contacts.all',\n    'show' =&gt; 'contacts.view'\n]);\n</code></pre>"},{"location":"route_routing/#api-resourceful-route","title":"API Resourceful Route","text":"<p>Untuk API controller, dicadangkan create API yang khusus untuk handle request dan gunakan namespace <code>App\\Http\\Controllers\\Api\\*</code></p> <pre><code>Route::apiResource('contacts', \\App\\Http\\Controllers\\ContactController::class);\n</code></pre> <p>Verify using artisan</p> <pre><code>php artisan route:list --name=contacts --path=api\n</code></pre> <p>Atau boleh guna <code>[]</code> bersama <code>Route::apiResources()</code></p> <pre><code>&lt;?php\nRoute::apiResources([\n    'contacts' =&gt; \\App\\Http\\Controllers\\Api\\ContactController::class,\n    'companies' =&gt; \\App\\Http\\Controllers\\Api\\CompanyController::class\n]);  \n</code></pre>"},{"location":"route_routing/#print-all-route","title":"Print all route","text":"<pre><code>php artisan route:list\n</code></pre>"},{"location":"search/","title":"Searching","text":""},{"location":"search/#search","title":"Search","text":"<p>View - Search Form</p> <pre><code>&lt;form&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n            &lt;select id=\"filter_company_id\" class=\"custom-select\"&gt;\n                @foreach($companies as $id=&gt;$name)\n                &lt;option {{ $id == request('company_id')? 'selected' : '' }} value=\"{{ $id }}\"&gt;{{ $name }}&lt;/option&gt;\n                @endforeach\n\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col\"&gt;\n            &lt;div class=\"input-group mb-3\"&gt;\n                &lt;input type=\"text\" name=\"query_text\" id=\"query_text\" class=\"form-control\" placeholder=\"Search...\"\n                        aria-label=\"Search...\" aria-describedby=\"button-addon2\" value=\"{{ request('query_text') }}\"&gt;\n                &lt;div class=\"input-group-append\"&gt;\n                    &lt;button class=\"btn btn-outline-secondary\" type=\"button\"&gt;\n                        &lt;i class=\"fa fa-refresh\"&gt;&lt;/i&gt;\n                    &lt;/button&gt;\n                    &lt;button class=\"btn btn-outline-secondary\" type=\"submit\"\n                            id=\"button-addon2\"&gt;\n                        &lt;i class=\"fa fa-search\"&gt;&lt;/i&gt;\n                    &lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Controller</p> <pre><code>&lt;?php\npublic function index()\n{\n    $phones = Phone::query()-&gt;orderBy('name', 'asc')-&gt;where(function ($query){\n        if($companyId = \\request('company_id')){\n            $query-&gt;where('company_id', $companyId);\n        }\n\n        if($queryText = \\request('query_text')){\n            $query-&gt;where('name', 'LIKE', \"%{$queryText}%\");\n        }\n    })-&gt;paginate(8);\n\n    return view('phones.index', ['phones' =&gt; $phones]);\n}\n</code></pre> <p>View - Display search result</p> <pre><code>&lt;table class=\"table table-bordered table-condensed table-hover\"&gt;\n  &lt;thead class=\"thead-dark\"&gt;\n    &lt;tr&gt;\n      &lt;th scope=\"col\"&gt;Phone Name&lt;/th&gt;\n      &lt;th&gt;Number&lt;/th&gt;\n      &lt;th&gt;Active&lt;/th&gt;\n      &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  @forelse ($phones as $phone)\n  &lt;tr&gt;\n    &lt;td&gt;{{ $phone-&gt;name }}&lt;/td&gt;\n    &lt;td&gt;{{ $phone-&gt;number }}&lt;/td&gt;\n    &lt;td&gt;{{ $phone-&gt;is_deleted }}&lt;/td&gt;\n    &lt;td style=\"width: 20%\"&gt;\n      &lt;form action=\"{{ route('phones.destroy', $phone-&gt;id) }}\" method=\"POST\"&gt;\n        @method('DELETE') @csrf\n        &lt;a\n          href=\"{{ route('phones.show', $phone-&gt;id) }}\"\n          class=\"btn btn-outline-primary\"\n          &gt;View&lt;/a\n        &gt;\n        &lt;a\n          href=\"{{ route('phones.edit', $phone-&gt;id) }}\"\n          class=\"btn btn-outline-primary\"\n          &gt;Edit&lt;/a\n        &gt;\n        &lt;button type=\"submit\" class=\"btn btn-outline-danger\"&gt;Delete&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  @empty\n  &lt;tr&gt;\n    &lt;td colspan=\"3\"&gt;Tiada rekod&lt;/td&gt;\n  &lt;/tr&gt;\n  @endforelse\n&lt;/table&gt;\n{{ $phones-&gt;appends(['query' =&gt; $query ])-&gt;links() }}\n</code></pre>"},{"location":"search_query/","title":"Search Query","text":""},{"location":"search_query/#search-query","title":"Search query","text":"<p>A Query <pre><code>&lt;?php \nif ($companyId = \\request('company_id')) {\n    $query-&gt;where('company_id', $companyId);\n}\n</code></pre></p> <p>A and B or B1.. query</p> <pre><code>&lt;?php     \nif ($companyId = \\request('company_id')) {\n    $query-&gt;where('company_id', $companyId);\n}\n\nif ($queryText = \\request('query_text')) {                \n    $query-&gt;where('first_name', 'LIKE', \"%{$queryText}%\");\n    $query-&gt;orWhere('last_name', 'LIKE', \"%{$queryText}%\");\n    $query-&gt;orWhere('email', 'LIKE', \"%{$queryText}%\");     \n};\n</code></pre> <p>A and (B or B1..) Query</p> <pre><code>&lt;?php \nif ($companyId = \\request('company_id')) {\n    $query-&gt;where('company_id', $companyId);\n}\n\n// group query  -&gt; AND (other query)\nif ($queryText = \\request('query_text')) {                \n    $query-&gt;where(function ($query) use ($queryText) {\n        $query-&gt;where('first_name', 'LIKE', \"%{$queryText}%\");\n        $query-&gt;orWhere('last_name', 'LIKE', \"%{$queryText}%\");\n        $query-&gt;orWhere('email', 'LIKE', \"%{$queryText}%\");\n    });\n}\n</code></pre> <p>A and (B or B1..) query with relation</p> <pre><code>&lt;?php \n\npublic function scopeFilter(\\Illuminate\\Database\\Eloquent\\Builder $query)\n{\n    if ($companyId = \\request('company_id')) {\n        $query-&gt;where('company_id', $companyId);\n    }\n\n    // group query  -&gt; AND (other query)\n    if ($queryText = \\request('query_text')) {                \n        $query-&gt;where(function ($query) use ($queryText) {\n            $query-&gt;where('first_name', 'LIKE', \"%{$queryText}%\");\n            $query-&gt;orWhere('last_name', 'LIKE', \"%{$queryText}%\");\n            $query-&gt;orWhere('email', 'LIKE', \"%{$queryText}%\");\n        });\n\n        // search relation model\n        $query-&gt;orWhereHas('company', function ($query) use ($queryText) {\n            $query-&gt;where('name', 'LIKE', \"%{$queryText}%\");\n        });\n\n    }\n\n    return $query;\n}\n</code></pre>"},{"location":"seeder/","title":"Seeder","text":""},{"location":"seeder/#seeder","title":"Seeder","text":"<p>Seeder digunakan untuk menjana data dummy bagi tujuan memudahkan pembangunan sistem dilaksanakan. </p> <p>Create table seeder</p> <pre><code> php artisan make:seeder CompaniesTableSeeder\n</code></pre> <p>Masukkan code untuk seeder table </p> <pre><code>&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass CompaniesTableSeeder extends Seeder\n{\n    /**\n    * Run the database seeds.\n    *\n    * @return void\n    */\n    public function run()\n    {\n        //\n        DB::table('companies')-&gt;truncate();\n\n        $companies = [];\n\n        foreach (range(1, 1000) as $key){\n            $companies[] = [\n                'name' =&gt; $name = \"Company $key\",\n                'address' =&gt; \"Address $name\",\n                'website' =&gt; \"website{$key}.com\",\n                'email' =&gt; \"email$key@gmail.com\",\n                'created_at' =&gt; now(),\n                'updated_at' =&gt; now()\n            ];\n        }\n\n        DB::table('companies')-&gt;insert($companies);\n    }\n}\n</code></pre> <p>Run Seeder table</p> <pre><code> php artisan db:seed --class=CompaniesTableSeeder\n</code></pre> <p>Data yang telah dijana oleh  seeder akan kelihatan seperti berikut : </p> <p></p> <p>or register seeder dalam file DatabaseSeeder.php</p> <pre><code>&lt;?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n    * Seed the application's database.\n    *\n    * @return void\n    */\n    public function run()\n    {        \n        // \\App\\Models\\User::factory(10)-&gt;create();\n        // temp for development\n        DB::statement('SET FOREIGN_KEY_CHECKS=0;');\n\n        $this-&gt;call(CompaniesTableSeeder::class);\n\n        DB::statement('SET FOREIGN_KEY_CHECKS=0;');\n    }\n}\n</code></pre> <p>Laksanakan arahan berikut </p> <pre><code> php artisan db:seeds\n</code></pre>"},{"location":"structure/","title":"Laravel Architecture","text":""},{"location":"structure/#mvc-architecture","title":"MVC Architecture","text":"<p>Laravel applications follow the Model-View-Controller architecture design pattern.</p> <p></p> <ol> <li>Models represents the entities in database and helps you to query the database and return the data</li> <li>Views are the pages which will be displayed when accessed the app. View Component is used for the User Interface of the application.</li> <li>Controllers handle user requests, gets required data from the models and pass them to the Views. Controllers acts as an intermediary between Model and View Components to process the business logic and incoming request.</li> </ol> <p>Source : https://www.parthpatel.net/laravel-tutorial-for-beginner/</p>"},{"location":"structure/#laravel-directory-structure","title":"Laravel Directory Structure","text":""},{"location":"structure/#environment-configuration-file","title":"Environment Configuration File","text":"<p>File <code>.env</code> mengandungi basic configuration services untuk aplikasi seperti panggilan ke dabatase, email setting dan sebagainya</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre> <p>kesemua configuration dalam file <code>.env</code> akan dipanggil oleh laravel melalui <code>config/app.php</code> menggunakan helper method <code>env()</code> sebagai contoh : </p> <pre><code>'name' =&gt; env('APP_NAME', 'Laravel'),\n</code></pre> <p>File <code>.env</code> tidak perlu commit utuk push, untuk tujuan backup/sample file gunakan file <code>.env.example</code></p>"},{"location":"template/","title":"Template","text":""},{"location":"template/#workshop-template-1-basic","title":"Workshop Template 1 (Basic)","text":"<p>Download Template</p> <p>or clone using git </p> <pre><code>git clone https://github.com/akusaiful/laravel-template.git\n</code></pre>"},{"location":"template/#workshop-template-2-advance","title":"Workshop Template 2 (Advance)","text":"<p>https://bootstrapmade.com/bootstrap-admin-templates/</p>"},{"location":"template/#workshop-template-3-advance","title":"Workshop Template 3 (Advance)","text":"<p>Coming soon...</p>"},{"location":"templating/","title":"Blade Template","text":""},{"location":"templating/#setup-view-layout","title":"Setup View Layout","text":"<p>Basic directory laravel</p> <p></p> <p>Create folder <code>resources\\views\\layouts\\</code> and file <code>main.blade.php</code>. Sebagai main layout. Letakkan code berikut untuk content dari subview</p> <pre><code>@yield('content')\n</code></pre> <p>di subview letakkan code berikut sebagai contoh di <code>resources\\views\\index.blade.php</code></p> <pre><code>&lt;?php \n@extends('layouts.main')\n\n@section('title', 'Tajuk here')\n\n@section('content')\n.\n.\n@endsection\n</code></pre> <p>dan call guna route berikut. Letak di file <code>routes\\web.php</code> :</p> <pre><code>&lt;?php \nRoute::get('/', function(){\n    return view('index');\n});\n</code></pre>"},{"location":"templating/#passing-variable","title":"Passing variable","text":"<pre><code>&lt;?php \n// First\nreturn view('folder.view_name')-&gt;with('variablename', $value)\n\n// Second\nreturn view('folder.view_name')-&gt;compact('variable_name')\n\n// Third\nreturn view('folder.view_name', [])\n</code></pre> <p>For more info https://laravel.com/docs/5.5/blade</p>"},{"location":"translation/","title":"Setup","text":""},{"location":"translation/#1-create-translation-file","title":"1. Create translation file","text":"<p>Laravel akan melihat fail translation di lokasi berikut : <code>resources/lang/&lt;languagecode&gt;/&lt;filename&gt;.php</code>.</p> <p>Create languagecode <code>malay</code> dan nama filename <code>phone.php</code> untuk membuat translation berkaitan module phone sebagai contoh.</p> <pre><code>&lt;?php\n\nreturn [\n    'title' =&gt; 'Directori Telefon'\n];\n</code></pre>"},{"location":"translation/#2-masukkan-translation-ke-view-__","title":"2. Masukkan translation ke view __()","text":"<p>Tukar statik text berikut : </p> <p><pre><code>    &lt;div class=\"d-flex justify-content-between align-items-center\"&gt;\n        &lt;h2&gt;Phone Directory&lt;/h2&gt;\n        &lt;ol&gt;\n            &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;Inner Page&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n</code></pre> Menggunakan __() translation facade</p> <pre><code>    &lt;div class=\"d-flex justify-content-between align-items-center\"&gt;\n        &lt;h2&gt;{{ __('phone.title') }}&lt;/h2&gt;    \n        &lt;ol&gt;\n            &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;Inner Page&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"translation/#3-ubah-language-kepada-malay-dalam-configappphp","title":"3. Ubah language kepada 'malay' dalam `config/app.php'","text":"<pre><code>'locale' =&gt; 'malay',\n</code></pre> <p>ekses ke URL <code>/phones</code> untuk menguji smada locale berfungsi dengan baik atau tidak.</p>"},{"location":"translation_middleware/","title":"Transalation Middleware","text":""},{"location":"translation_middleware/#1-create-middleware","title":"1. Create middleware","text":"<pre><code>php artisan make:middleware LanguageMidlleware\n</code></pre>"},{"location":"translation_middleware/#2-set-locale","title":"2. Set locale","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass LanguageMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Illuminate\\Http\\Response|\\Illuminate\\Http\\RedirectResponse)  $next\n     * @return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\RedirectResponse\n     */\n    public function handle(Request $request, Closure $next)\n    {\n        if(session('locale')){\n            app()-&gt;setLocale(session('locale'));\n        }\n        return $next($request);\n    }\n}\n</code></pre>"},{"location":"translation_middleware/#3-insert-middleware-to-kernel-apphttpkernelphp","title":"3. Insert middleware to Kernel <code>app\\Http\\Kernel.php</code>","text":"<pre><code>&lt;?php \nprotected $middlewareGroups = [\n    'web' =&gt; [\n        \\App\\Http\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        \\App\\Http\\Middleware\\LanguageMiddleware::class\n    ],\n\n    'api' =&gt; [\n        // \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n        'throttle:api',\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n    ],\n];\n</code></pre>"},{"location":"translation_middleware/#4-create-route-untuk-set-locale","title":"4. Create route untuk set locale","text":"<pre><code>Route::get('/{locale}', function($locale){    \n    session()-&gt;put('locale', $locale);        \n    return redirect('/home');\n});\n</code></pre>"},{"location":"tugasan_0_structure_to_object/","title":"Object Oriented Programming","text":"<p>Tukarkan structure berikut kepada bentuk class </p> <p> <pre><code>&lt;?php\n\n$ic = \"901225015656\";\n\necho \"Nama Student : Farhan &lt;br /&gt;\";\necho \"Umur : \" . checkIc($ic, 'age') . \" Tahun &lt;br /&gt;\";\necho \"Jantina : \" . checkIc($ic, 'sex');\n\n\nfunction checkIc($ic, $type)\n{\n    if ($type == 'sex') {\n        return ((int)substr($ic, -1) % 2 == 0 ? 'Perempuan' : 'Lelaki');\n    }\n\n    // tulis pengiraan umur // assume 19\n    if ($type == 'age') {        \n        $year = \"19\" . substr($ic,0,2);\n        return date('Y') - $year;        \n    }\n}\n</code></pre></p>"},{"location":"tugasan_1/","title":"Tugasan 1","text":""},{"location":"tugasan_1/#japanese_ogre-latihan-pemahaman-route","title":":japanese_ogre: Latihan : Pemahaman Route","text":"<ol> <li> <p>Tulis satu route <code>/calc</code> untuk membolehkan pengiraan sifir 2 seperti berikut : </p> <pre><code>1 * 2 = 2\n2 * 2 = 4\n..\n..\n12 * 2 = 24\n</code></pre> </li> <li> <p>Jadikan pengiraan diatas sebagai variable yang membolehkan input dari user diambil untuk membuat pengiraan, contoh <code>/calc/4</code> akan mengira sifir 4 atau <code>/calc/12</code> akan mengira sifir 12    </p> </li> </ol>"},{"location":"tugasan_2/","title":"Tugasan 2","text":""},{"location":"tugasan_2/#japanese_ogre-tugasan-penggunaan-template-10-minit","title":":japanese_ogre: Tugasan Penggunaan Template (10 Minit)","text":"<p>Tugaasan ini menguji kefahaman penggunaan template bersama route dalam membangunkan sebuah fungsi web asas yang mudah.</p>"},{"location":"tugasan_2/#latihan-1","title":"Latihan 1","text":"<ol> <li>Download template dari bootstrapmade</li> <li>Masukkan template (yg dimuat turun) ke dalam laravel layout</li> <li>Modify layout kiraan sifir menggunakan layout yang telah dikemaskini.</li> </ol>"},{"location":"tugasan_2/#latihan-2","title":"Latihan 2","text":"<ol> <li>Masukkan form yang membolehkan input number yang dikehendaki dimasukkan oleh pengguna. Form mengandungi : <ol> <li>Textbox</li> <li>Button submit</li> </ol> </li> <li>Papar sifir yang dikira berdasarkan number yang dimasukkan oleh pengguna</li> </ol>"},{"location":"tugasan_3/","title":"Tugasan 3","text":""},{"location":"tugasan_3/#latihan-penghasilan-page-dan-penggunaan-link","title":"Latihan Penghasilan Page dan Penggunaan Link","text":"<p>Buat 3 page berikut menggunakan template bizland</p> <ul> <li>Page 1 : About Us</li> <li>Page 2 : Contact</li> <li>Page 3 : History</li> </ul> <p>Guna routing berikut : </p> <ol> <li>/about-us</li> <li>/contact</li> <li>/history</li> </ol> <p>** Step to create new page in laravel 1. Create Controller <code>HomeController.php</code> in <code>app/Http/Controllers</code> directory. 2. Define a method <code>aboutUs</code> that returns a view named <code>home.about-us</code>. 3. Ensure the <code>HomeController</code> extends the base <code>Controller</code> class. 4. The view <code>home.about-us</code> should be created in the <code>resources/views/home</code> directory. 5. The view should contain a simple message indicating that this is the About Us page. 6. Create '/about-us' route in web.php</p>"},{"location":"upload/","title":"Upload File","text":""},{"location":"upload/#1-set-form-to-enctypemultipartform-data","title":"1. Set form to <code>enctype=\"multipart/form-data\"</code>","text":"<pre><code>&lt;?php\n&lt;form action=\"{{ route('profile.update') }}\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n    @csrf\n    @method('PUT')     \n</code></pre>"},{"location":"upload/#2-set-input-file","title":"2. Set input file","text":"<p>Set input file dalam form <code>accept=\"image/*</code> for client side validation</p> <pre><code>&lt;input type=\"file\" name=\"profile_picture\" accept=\"image/*\"&gt;\n</code></pre>"},{"location":"upload/#3-create-server-side-validation","title":"3. Create Server side validation","text":"<p>Create validation dekat bahagian controlller atau masukkan di bahagian request class. </p> <pre><code>&lt;?php\npublic function rules()\n{\n    return [\n        'name' =&gt; 'required',\n        'email' =&gt; 'required|email',\n        'profile_picture' =&gt; ['nullable', 'mimes:png,jpg,bmp']\n    ];\n}\n</code></pre>"},{"location":"upload/#4-create-folder-publicupload","title":"4. Create folder <code>public/upload</code>","text":"<p>Create folder sebagai tempat lokasi upload file. Setkan write permision untuk folder tersebut.</p>"},{"location":"upload/#5-update-model-property-fillable","title":"5. Update model property <code>$fillable</code>","text":"<pre><code> protected $fillable = [\n    'name',\n    'email',\n    'password',\n    'profile_picture',\n    'address',\n    'bio'\n];\n</code></pre>"},{"location":"upload/#6-update-controller","title":"6. Update controller","text":"<pre><code>&lt;?php\n$request-&gt;profile_picture-&gt;move(public_path('upload'), $filename = $request-&gt;user()-&gt;id . '-avatar.jpg');\n$data = $request-&gt;validated();\n$data['profile_picture'] = $filename;\n$request-&gt;user()-&gt;update($data);\n</code></pre> <p>laksanakan ujian untuk test upload.</p>"},{"location":"upload/#usefull-method","title":"Usefull method","text":"<ol> <li><code>$request-&gt;profile_picture-&gt;getClientOriginalName()</code> - return the original name of the uploaded file</li> <li><code>$request-&gt;profile_picture-&gt;getClientOriginalExtension()</code> - return extension</li> <li><code>$request-&gt;profile_picture-&gt;getClientSize()</code> - file size in byte</li> <li><code>$request-&gt;profile_picture-&gt;getClientMimeType()</code> - mime type</li> </ol>"},{"location":"voyager/","title":"Voyager","text":"<p>Follow instalation step to Install voyager.</p> <pre><code> https://github.com/the-control-group/voyager\n</code></pre> <p>If error like this</p> <pre><code>SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))\n</code></pre> <p>update file <code>/app/Providers/AppServiceProvider.php</code></p> <pre><code>use Illuminate\\Support\\Facades\\Schema;\n\n/**\n* Bootstrap any application services.\n*\n* @return void\n*/\npublic function boot()\n{\n    Schema::defaultStringLength(191);\n}\n</code></pre> <p>:bulb: Alternatively, you may enable the <code>innodb_large_prefix</code> option for your database. Refer to your database's documentation for instructions on how to properly enable this option.</p>"},{"location":"vsc_extension/","title":"VSC Extension","text":""},{"location":"vsc_extension/#extension-bundle-for-vsc","title":"Extension bundle for VSC","text":"<p>https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel-extension-pack</p>"}]}